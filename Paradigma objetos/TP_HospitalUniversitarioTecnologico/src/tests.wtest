import Personas.*
import Medicos.*
import Enfermedades.*

// ----------------------------------------------------------------
// ðŸ”¸ Mi universo.
// ----------------------------------------------------------------
// Enfermedades.
const malaria = new EnfermedadInfecciosa(cantDeCelulasAmenazadas = 2500)
const lupus = new EnfermedadAutoinmune(cantDeCelulasAmenazadas = 2000)

// Pacientes.
const logan = new Persona(cantidadDeCelulas = 36000000000)

// Medicos.
const cameron = new Medico(cantidadDeCelulas = 28000000000, dosis = 100)
const cuddy = new JefeDeDepartamento(subordinados = #{new Medico(cantidadDeCelulas = 28000000000, dosis = 27)}, cantidadDeCelulas = 28000000000, dosis = 1000)

// ----------------------------------------------------------------
// ðŸ”¸ Enfermedades.
// ----------------------------------------------------------------
describe "Enfermedades infecciosas" {
	test "Es posible obtener el efecto que le hace una dosis dada" {
		assert.equals(160, malaria.efectoMedicamento(180))
	}
	
	test "Es posible atenuarla" {
		malaria.atenuar(180)
		assert.equals(100, malaria.cantDeCelulasAmenazadas())
	}
	
	test "Es posible saber si se puede curar (Cantidad de celulas amenazadas es menor o igual a 0)" {
		// Si la cantidad de celulas amenazadas es mayor a 0, entonces no puede curarse.
		malaria.atenuar(180)
		assert.notThat(malaria.puedeCurarse())
		
		// Si la cantidad de celulas amenazadas es menor o igual a 0, entonces puede curarse.
		malaria.atenuar(27)
		assert.that(malaria.puedeCurarse())
	}
	
	test "Es posible que se reproduzca (Duplica la cantidad de celulas amenazadas)" {
		malaria.reproducir()
		assert.equals(5000, malaria.cantDeCelulasAmenazadas())
	}
	
	test "Es posible producir los efectos de la enfermedad en una persona dada (Si es agresiva, mata la mitad de las celulas que amenaza de la persona)" {
		// Si no es agresiva, entonces se duplica la cantidad de celulas afectadas.
		const unaEnfermedadInfecciosa = new EnfermedadInfecciosa(cantDeCelulasAmenazadas = 500)
		
		unaEnfermedadInfecciosa.producirEfecto(logan)
		assert.equals(36000000000, logan.cantidadDeCelulas())
		assert.equals(1000, unaEnfermedadInfecciosa.cantDeCelulasAmenazadas())
		
		// Si es agresiva, entonces mata la mitad de las celulas que amenaza de la persona. Luego, se reproduce.
		malaria.producirEfecto(logan)
		assert.equals(35999998750, logan.cantidadDeCelulas())
		assert.equals(5000, malaria.cantDeCelulasAmenazadas())
	}
	
	test "Es posible saber si es una enfermedad agresiva para una persona dada (La enfermedad de la persona dada posee una cantidad de celulas amenazadas mayor a 1000)" {
		// Si la enfermedad de una persona dada posee una cantidad de celulas amenazadas menor a 1000, entonces no es agresiva.
		assert.notThat(new EnfermedadInfecciosa(cantDeCelulasAmenazadas = 500).esAgresiva(logan))
		
		// Si la enfermedad de una persona dada posee una cantidad de celulas amenazadas mayor a 1000, entonces es agresiva.
		assert.that(malaria.esAgresiva(logan))
	}
}

describe "Enfermedades autoinmune" {
	test "Es posible obtener el efecto que le hace una dosis dada" {
		assert.equals(100, lupus.efectoMedicamento(100))
	}
	
	test "Es posible atenuarla" {
		lupus.atenuar(100)
		assert.equals(500, lupus.cantDeCelulasAmenazadas())
	}
	
	test "Es posible saber si se puede curar (Cantidad de celulas amenazadas es menor o igual a 0)" {
		// Si la cantidad de celulas amenazadas es mayor a 0, entonces no puede curarse.
		lupus.atenuar(100)
		assert.notThat(lupus.puedeCurarse())
		
		// Si la cantidad de celulas amenazadas es menor o igual a 0, entonces puede curarse.
		lupus.atenuar(34)
		assert.that(lupus.puedeCurarse())
	}
	
	test "Es posible producir los efectos de la enfermedad en una persona dada (Sube un grado la temperatura de la persona dada)" {
		lupus.producirEfecto(logan)
		lupus.producirEfecto(logan)
		assert.equals(38, logan.temperatura())
		assert.equals(2, lupus.cantVecesProducidoEfecto())
	}
	
	test "Es posible saber si es una enfermedad agresiva para una persona dada (La temperatura de la persona esta entre los 35 y 40 grados)" {
		// Si la temperatura de la persona esta entre 35 y 40 grados, entonces no es agresiva.
		assert.notThat(lupus.esAgresiva(logan))
		
		// Si la temperatura de la persona es menor a 35 grados, entonces es agresiva.
		assert.that(lupus.esAgresiva(new Persona(cantidadDeCelulas = 36000000000, temperatura = 34)))
		
		// Si la temperatura de la persona es mayor a 40 grados, entonces es agresiva.
		assert.that(lupus.esAgresiva(new Persona(cantidadDeCelulas = 36000000000, temperatura = 41)))
	}
}

describe "Hipotermia" {
	test "Es posible atenuar (No se atenua)" {
		laHipotermia.atenuar(100)
		assert.equals(0, laHipotermia.cantDeCelulasAmenazadas())
	}
	
	test "Es posible producir los efectos de la enfermedad en una persona dada (Le baja totalmente la temperatura)" {
		laHipotermia.producirEfecto(logan)
		assert.equals(0, logan.temperatura())
	}
	
	test "Es posible saber si es una enfermedad agresiva para una persona dada (Es extremadamente agresiva)" {
		assert.that(laHipotermia.esAgresiva(logan))
	}
}

// ----------------------------------------------------------------
// ðŸ”¸ Personas.
// ----------------------------------------------------------------
describe "Personas" {
	test "Es posible contraer una enfermedad" {
		logan.contraer(malaria)
		logan.contraer(lupus)
		assert.equals(#{malaria, lupus}, logan.enfermedades())
	}
	
	test "Es posible curarse de una enfermedad" {
		logan.contraer(malaria)
		logan.contraer(lupus)
		logan.curarse(lupus)
		assert.equals(#{malaria}, logan.enfermedades())
	}
	
	test "Es posible obtener la enfermedad que mas celulas afecta." {
		logan.contraer(malaria)
		logan.contraer(lupus)
		assert.equals(malaria, logan.laQueMasCelulasAfecta())
	}
	
	test "Es posible obtener la cantidad total de celulas agresivas" {
		logan.contraer(malaria)
		logan.contraer(lupus)
		assert.equals(4500, logan.cantidadDeCelulasAgresivas())
	}
	
	test "Es posible aplicar una dosis a una enfermedad" {
		logan.contraer(malaria)
		logan.contraer(lupus)
		
		// Si no puede curarse, entonces no se cura.
		logan.aplicarDosis(lupus, 100)
		assert.equals(#{malaria, lupus}, logan.enfermedades())
		assert.equals(2500, malaria.cantDeCelulasAmenazadas())
		assert.equals(500, lupus.cantDeCelulasAmenazadas())
		
		// Si puede curarse, entonces se cura.
		logan.aplicarDosis(lupus, 34)
		assert.equals(#{malaria}, logan.enfermedades())
		assert.equals(2500, malaria.cantDeCelulasAmenazadas())
		assert.equals(-10, lupus.cantDeCelulasAmenazadas())
	}
	
	test "Es posible recibir una dosis de medicamento" {
		logan.contraer(malaria)
		logan.contraer(lupus)
		logan.recibir(134)
		assert.equals(#{malaria}, logan.enfermedades())
		assert.equals(790, malaria.cantDeCelulasAmenazadas())
		assert.equals(-10, lupus.cantDeCelulasAmenazadas())
	}
	
	test "Es posible bajarle totalmente la temperatura" {
		logan.bajarTotalmenteTemperatura()
		assert.equals(0, logan.temperatura())
	}
	
	test "Es posible subirle la temperatura" {
		logan.subirTemperatura(10)
		assert.equals(46, logan.temperatura())
	}
	
	test "Es posible matar una cantidad dada de celulas" {
		logan.matarCelulas(1000000000)
		assert.equals(35000000000, logan.cantidadDeCelulas())
	}
	
	test "Es posible vivir un dia (Desencadena los efectos de cada enfermedad)" {
		logan.contraer(malaria)
		logan.contraer(lupus)
		logan.viviUnDia()
		assert.equals(35999998750, logan.cantidadDeCelulas())
		assert.equals(37, logan.temperatura())
		assert.equals(5000, malaria.cantDeCelulasAmenazadas())
		assert.equals(1, lupus.cantVecesProducidoEfecto())
	}
	
	test "Es posible saber si esta en coma (Tiene menos de 10000000000 o su temperatura es mayor o igual a 40)" {
		// Si tiene mas de 10000000000 y su temperatura es menor a 40, entonces no esta en coma.
		assert.notThat(logan.estaEnComa())
		
		// Si tiene menos de 10000000000 y su temperatura es menor a 40, entonces esta en coma.
		assert.that(new Persona(cantidadDeCelulas = 9999999999, temperatura = 36).estaEnComa())
		
		// Si tiene mas de 10000000000 y su temperatura es mayor o igual a 40, entonces esta en coma.
		assert.that(new Persona(cantidadDeCelulas = 10000000001, temperatura = 41).estaEnComa())
		
		// Si tiene menos de 10000000000 y su temperatura es mayor o igual a 40, entonces esta en coma.
		assert.that(new Persona(cantidadDeCelulas = 9999999999, temperatura = 41).estaEnComa())
	}
}

// ----------------------------------------------------------------
// ðŸ”¸ Medicos.
// ----------------------------------------------------------------
describe "Medicos" {
	test "Es posible atender a un paciente dado" {
		logan.contraer(malaria)
		logan.contraer(lupus)
		cameron.atender(logan)
		assert.equals(#{malaria, lupus}, logan.enfermedades())
		assert.equals(1300, malaria.cantDeCelulasAmenazadas())
		assert.equals(500, lupus.cantDeCelulasAmenazadas())
	}
	
	test "Es posible contraer una enfermedad" {
		cameron.contraer(malaria)
		cameron.contraer(lupus)
		assert.equals(#{malaria, lupus}, cameron.enfermedades())
	}
	
	test "Es posible curarse de una enfermedad" {
		cameron.contraer(malaria)
		cameron.contraer(lupus)
		cameron.curarse(lupus)
		assert.equals(#{malaria}, cameron.enfermedades())
	}
	
	test "Es posible obtener la enfermedad que mas celulas afecta." {
		cameron.contraer(malaria)
		cameron.contraer(lupus)
		assert.equals(lupus, cameron.laQueMasCelulasAfecta())
	}
	
	test "Es posible obtener la cantidad total de celulas agresivas" {
		cameron.contraer(malaria)
		cameron.contraer(lupus)
		assert.equals(600, cameron.cantidadDeCelulasAgresivas())
	}
	
	test "Es posible aplicar una dosis a una enfermedad" {
		// Si no puede curarse, entonces no se cura.
		cameron.contraer(malaria)
		cameron.contraer(lupus)
		cameron.aplicarDosis(lupus, 25)
		assert.equals(#{malaria, lupus}, cameron.enfermedades())
		assert.equals(100, malaria.cantDeCelulasAmenazadas())
		assert.equals(125, lupus.cantDeCelulasAmenazadas())
		
		// Si puede curarse, entonces se cura.
		cameron.aplicarDosis(lupus, 9)
		assert.equals(#{malaria}, cameron.enfermedades())
		assert.equals(100, malaria.cantDeCelulasAmenazadas())
		assert.equals(-10, lupus.cantDeCelulasAmenazadas())
	}
	
	test "Es posible recibir una dosis de medicamento" {
		cameron.contraer(malaria)
		cameron.contraer(lupus)
		cameron.recibir(27)
		assert.equals(#{lupus}, cameron.enfermedades())
		assert.equals(-5, malaria.cantDeCelulasAmenazadas())
		assert.equals(95, lupus.cantDeCelulasAmenazadas())
	}
	
	test "Es posible autoatenderse al contraer una enfermedad" {
		cameron.contraer(malaria)
		assert.equals(#{malaria}, cameron.enfermedades())
		assert.equals(1300, malaria.cantDeCelulasAmenazadas())
	}
	
	test "Es posible bajarle totalmente la temperatura" {
		cameron.bajarTotalmenteTemperatura()
		assert.equals(0, cameron.temperatura())
	}
	
	test "Es posible subirle la temperatura" {
		cameron.subirTemperatura(10)
		assert.equals(46, cameron.temperatura())
	}
	
	test "Es posible matar una cantidad dada de celulas" {
		cameron.matarCelulas(1000000000)
		assert.equals(27000000000, cameron.cantidadDeCelulas())
	}
	
	test "Es posible vivir un dia (Desencadena los efectos de cada enfermedad)" {
		cameron.contraer(malaria)
		cameron.contraer(lupus)
		cameron.viviUnDia()
		assert.equals(28000000000, cameron.cantidadDeCelulas())
		assert.equals(37, cameron.temperatura())
		assert.equals(200, malaria.cantDeCelulasAmenazadas())
		assert.equals(1, lupus.cantVecesProducidoEfecto())
	}
	
	test "Es posible saber si esta en coma (Tiene menos de 10000000000 o su temperatura es mayor o igual a 40)" {
		// Si tiene mas de 10000000000 y su temperatura es menor a 40, entonces no esta en coma.
		assert.notThat(cameron.estaEnComa())
		
		// Si tiene menos de 10000000000 y su temperatura es menor a 40, entonces esta en coma.
		assert.that(new Persona(cantidadDeCelulas = 9999999999, temperatura = 36).estaEnComa())
		
		// Si tiene mas de 10000000000 y su temperatura es mayor o igual a 40, entonces esta en coma.
		assert.that(new Persona(cantidadDeCelulas = 10000000001, temperatura = 41).estaEnComa())
		
		// Si tiene menos de 10000000000 y su temperatura es mayor o igual a 40, entonces esta en coma.
		assert.that(new Persona(cantidadDeCelulas = 9999999999, temperatura = 41).estaEnComa())
	}
}

// ----------------------------------------------------------------
// ðŸ”¸ Jefes de departamento.
// ----------------------------------------------------------------
describe "Jefes de departamento" {
	test "Es posible atender a un paciente dado" {
		cameron.contraer(malaria)
		cameron.contraer(lupus)
		cuddy.atender(cameron)
		assert.equals(#{lupus}, cameron.enfermedades())
		assert.equals(-5, malaria.cantDeCelulasAmenazadas())
		assert.equals(95, lupus.cantDeCelulasAmenazadas())
	}
	
	test "Es posible contraer una enfermedad" {
		cuddy.contraer(malaria)
		cuddy.contraer(lupus)
		assert.equals(#{malaria, lupus}, cuddy.enfermedades())
	}
	
	test "Es posible curarse de una enfermedad" {
		cuddy.contraer(malaria)
		cuddy.contraer(lupus)
		cuddy.curarse(lupus)
		assert.equals(#{malaria}, cuddy.enfermedades())
	}
	
	test "Es posible obtener la enfermedad que mas celulas afecta." {
		cuddy.contraer(malaria)
		cuddy.contraer(lupus)
		assert.equals(malaria, cuddy.laQueMasCelulasAfecta())
	}
	
	test "Es posible obtener la cantidad total de celulas agresivas" {
		cuddy.contraer(malaria)
		cuddy.contraer(lupus)
		assert.equals(3885, cuddy.cantidadDeCelulasAgresivas())
	}
	
	test "Es posible aplicar una dosis a una enfermedad" {
		// Si no puede curarse, entonces no se cura.
		cuddy.contraer(malaria)
		cuddy.contraer(lupus)
		cuddy.aplicarDosis(lupus, 100)
		assert.equals(#{malaria, lupus}, cuddy.enfermedades())
		assert.equals(2290, malaria.cantDeCelulasAmenazadas())
		assert.equals(95, lupus.cantDeCelulasAmenazadas())
		
		// Si puede curarse, entonces se cura.
		cuddy.aplicarDosis(lupus, 7)
		assert.equals(#{malaria}, cuddy.enfermedades())
		assert.equals(2290, malaria.cantDeCelulasAmenazadas())
		assert.equals(-10, lupus.cantDeCelulasAmenazadas())
	}
	
	test "Es posible recibir una dosis de medicamento" {
		cuddy.contraer(malaria)
		cuddy.contraer(lupus)
		cuddy.recibir(107)
		assert.equals(#{malaria}, cuddy.enfermedades())
		assert.equals(985, malaria.cantDeCelulasAmenazadas())
		assert.equals(-10, lupus.cantDeCelulasAmenazadas())
	}
	
	test "Es posible autoatenderse al contraer una enfermedad" {
		cuddy.contraer(malaria)
		assert.equals(#{malaria}, cuddy.enfermedades())
		assert.equals(2395, malaria.cantDeCelulasAmenazadas())
	}
	
	test "Es posible bajarle totalmente la temperatura" {
		cuddy.bajarTotalmenteTemperatura()
		assert.equals(0, cuddy.temperatura())
	}
	
	test "Es posible subirle la temperatura" {
		cuddy.subirTemperatura(10)
		assert.equals(46, cuddy.temperatura())
	}
	
	test "Es posible matar una cantidad dada de celulas" {
		cuddy.matarCelulas(1000000000)
		assert.equals(27000000000, cuddy.cantidadDeCelulas())
	}
	
	test "Es posible vivir un dia (Desencadena los efectos de cada enfermedad)" {
		cuddy.contraer(malaria)
		cuddy.contraer(lupus)
		cuddy.viviUnDia()
		assert.equals(27999998855, cuddy.cantidadDeCelulas())
		assert.equals(37, cuddy.temperatura())
		assert.equals(4580, malaria.cantDeCelulasAmenazadas())
		assert.equals(1, lupus.cantVecesProducidoEfecto())
	}
	
	test "Es posible saber si esta en coma (Tiene menos de 10000000000 o su temperatura es mayor o igual a 40)" {
		// Si tiene mas de 10000000000 y su temperatura es menor a 40, entonces no esta en coma.
		assert.notThat(cuddy.estaEnComa())
		
		// Si tiene menos de 10000000000 y su temperatura es menor a 40, entonces esta en coma.
		assert.that(new Persona(cantidadDeCelulas = 9999999999, temperatura = 36).estaEnComa())
		
		// Si tiene mas de 10000000000 y su temperatura es mayor o igual a 40, entonces esta en coma.
		assert.that(new Persona(cantidadDeCelulas = 10000000001, temperatura = 41).estaEnComa())
		
		// Si tiene menos de 10000000000 y su temperatura es mayor o igual a 40, entonces esta en coma.
		assert.that(new Persona(cantidadDeCelulas = 9999999999, temperatura = 41).estaEnComa())
	}
}