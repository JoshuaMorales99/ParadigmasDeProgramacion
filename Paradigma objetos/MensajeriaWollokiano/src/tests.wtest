import Mensajes.*
import Usuarios.*
import Chats.*

// --------------------------------------------------
// ðŸ”¸ Mi universo.
// --------------------------------------------------
// Tipos de contenido en mensajes.
const unTexto = new Texto(mensaje = "Hola que tal. Me llamo Pepito")
const unAudio = new Audio(duracion = 60)
const unaImagenOriginal = new Imagen(alto = 120, ancho = 180, modoCompresion = original)
const unaImagenVariable = new Imagen(alto = 120, ancho = 180, modoCompresion = new Variable(porcentaje = 50))
const unaImagenMaxima = new Imagen(alto = 120, ancho = 180, modoCompresion = maxima)
const otraImagenMaxima = new Imagen(alto = 100, ancho = 58, modoCompresion = maxima)
const unGifOriginal = new Gif(alto = 120, ancho = 180, cantCuadros = 10, modoCompresion = original)
const unGifVariable = new Gif(alto = 120, ancho = 180, cantCuadros = 10, modoCompresion = new Variable(porcentaje = 50))
const unGifMaxima = new Gif(alto = 120, ancho = 180, cantCuadros = 10, modoCompresion = maxima)
const otroGifMaxima = new Gif(alto = 100, ancho = 58, cantCuadros = 10, modoCompresion = maxima)
const unContacto = new Contacto(usuario = otroUsuario)

// Mensajes.
const unMensajeTexto = new Mensaje(emisor = unUsuario, tipoContenido = unTexto)
const unMensajeAudio = new Mensaje(emisor = unUsuario, tipoContenido = unAudio)
const unMensajeImagen = new Mensaje(emisor = unUsuario, tipoContenido = unaImagenOriginal)
const unMensajeGif = new Mensaje(emisor = otroUsuario, tipoContenido = unGifOriginal)
const unMensajeContacto = new Mensaje(emisor = unUsuario, tipoContenido = unContacto)

// Usuarios.
const unUsuario = new Usuario(nombre = "Pepito", cantMemoria = 1000)
const otroUsuario = new Usuario(nombre = "Usuario", cantMemoria = 10)
const unDuenio = new Usuario(nombre = "Pepita", cantMemoria = 1000)

// Chats.
const unChatClasico = new Chat()
const unChatPremiumDifusion = new ChatPremium(duenio = unDuenio, otraRestriccion = difusion)
const unChatPremiumRestringido = new ChatPremium(duenio = unDuenio, otraRestriccion = new Restringido(limite = 2))
const unChatPremiumAhorro = new ChatPremium(duenio = unDuenio, otraRestriccion = new Ahorro(pesoMaximo = 2000))

// --------------------------------------------------
// ðŸ”¸ Tipo de contenidos en mensajes.
// --------------------------------------------------
describe "Tipos de contenidos en mensajes" {
	// TEXTO.
	test "Es posible obtener la cantidad de caracteres en el contenido de Texto" {
		assert.equals(29, unTexto.cantCaracteres())
	}
	
	test "Es posible obtener el peso del contenido de Texto" {
		assert.equals(29, unTexto.peso())
	}
	
	test "Es posible saber si el contenido de Texto contiene un texto dado" {
		assert.that(unTexto.contiene("que tal"))
		assert.notThat(unTexto.contiene("Chau. Buena suerte"))
	}
	
	// AUDIO.
	test "Es posible obtener el peso del contenido de Audio" {
		assert.equals(72, unAudio.peso())
	}
	
	test "Es posible saber si el contenido de Audio contiene un texto dado" {
		assert.notThat(unAudio.contiene("Chau. Buena suerte"))
	}
	
	// IMAGEN.
	test "Es posible obtener la cantidad de pixeles totales del contenido de Imagen" {
		assert.equals(21600, unaImagenOriginal.cantTotalPixeles())
	}
	
	test "Es posible obtener el peso del contenido de Imagen con compresion original" {
		assert.equals(43200, unaImagenOriginal.peso())
	}
	
	test "Es posible obtener el peso del contenido de Imagen con compresion variable" {
		assert.equals(21600, unaImagenVariable.peso())
	}
	
	test "Es posible obtener el peso del contenido de Imagen con compresion maxima (Superior a 10000 pixeles)" {
		assert.equals(11600, otraImagenMaxima.peso())
	}
	
	test "Es posible obtener el peso del contenido de Imagen con compresion maxima (No superior a 10000 pixeles)" {
		assert.equals(20000, unaImagenMaxima.peso())
	}
	
	test "Es posible saber si el contenido de Imagen contiene un texto dado" {
		assert.notThat(unaImagenOriginal.contiene("Chau. Buena suerte"))
	}
		
	// GIF.
	test "Es posible obtener el peso del contenido de Gif con compresion original" {
		assert.equals(432000, unGifOriginal.peso())
	}
	
	test "Es posible obtener el peso del contenido de Gif con compresion variable" {
		assert.equals(216000, unGifVariable.peso())
	}
	
	test "Es posible obtener el peso del contenido de Gif con compresion maxima (Superior a 10000 pixeles)" {
		assert.equals(116000, otroGifMaxima.peso())
	}
	
	test "Es posible obtener el peso del contenido de Gif con compresion maxima (No superior a 10000 pixeles)" {
		assert.equals(200000, unGifMaxima.peso())
	}
	
	// CONTACTO.
	test "Es posible obtener el peso del contenido de Contacto" {
		assert.equals(3, unContacto.peso())
	}
	
	test "Es posible saber si el contenido de Contacto contiene un texto dado" {
		assert.that(unContacto.contiene("Usuario"))
		assert.notThat(unContacto.contiene("Firulais"))
	}
}

// --------------------------------------------------
// ðŸ”¸ Mensajes.
// --------------------------------------------------
describe "Mensajes" {
	test "Es posible obtener el peso del contenido del tipo Texto" {
		assert.equals(29, unMensajeTexto.pesoContenido())
	}
	
	test "Es posible obtener el peso del contenido del tipo Audio" {
		assert.equals(72, unMensajeAudio.pesoContenido())
	}
	
	test "Es posible obtener el peso del contenido del tipo Imagen" {
		assert.equals(43200, unMensajeImagen.pesoContenido())
	}
	
	test "Es posible obtener el peso del contenido del tipo Gif" {
		assert.equals(432000, unMensajeGif.pesoContenido())
	}
	
	test "Es posible obtener el peso del contenido del tipo Contacto" {
		assert.equals(3, unMensajeContacto.pesoContenido())
	}
	
	test "Es posible obtener el peso de un mensaje" {
		assert.equals(42.7, unMensajeTexto.peso())
	}
	
	test "Es posible saber si un mensaje contiene un texto dado por nombre del emisor" {
		assert.that(unMensajeTexto.contiene("Pepito"))
		assert.notThat(unMensajeTexto.contiene("Usuario"))
	}
	
	test "Es posible saber si un mensaje contiene un texto por tipo de contenido" {
		assert.that(unMensajeTexto.contiene("que tal"))
		assert.notThat(unMensajeTexto.contiene("Chau. Buena suerte"))
	}
}

// --------------------------------------------------
// ðŸ”¸ Chats.
// --------------------------------------------------
describe "Chats clasicos" {
	test "Es posible saber si un usuario es participante del chat clasico" {
		unChatClasico.agregarParticipante(unDuenio)
		unChatClasico.agregarParticipante(unUsuario)
		assert.that(unChatClasico.esParticipante(unUsuario))
		assert.notThat(unChatClasico.esParticipante(otroUsuario))
	}
	
	test "Es posible saber si todos los participantes del chat clasico poseen espacio en memoria" {
		unChatClasico.agregarParticipante(unDuenio)
		unChatClasico.agregarParticipante(unUsuario)
		assert.that(unChatClasico.espacioSuficiente(100))
		assert.notThat(unChatClasico.espacioSuficiente(2000))
	}
	
	test "Al verificar que un usuario no es participante de un chat clasico, lanza una excepcion" {
		unChatClasico.agregarParticipante(unDuenio)
		unChatClasico.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("El usuario emisor no es un participante del chat", {unChatClasico.verificarParticipantes(otroUsuario)})
	}
	
	test "Al verificar que algun participante del chat clasico no posee memoria suficiente, lanza una excepcion" {
		unChatClasico.agregarParticipante(unDuenio)
		unChatClasico.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("Algun participante no posee espacio suficiente en memoria", {unChatClasico.verificarMemorias(2000)})
	}
	
	test "PUNTO 2: Al enviar un mensaje, se almacena en el chat clasico" {
		unChatClasico.agregarParticipante(unDuenio)
		unChatClasico.agregarParticipante(unUsuario)
		unChatClasico.enviar(unMensajeTexto)
		assert.equals([unMensajeTexto], unChatClasico.mensajes())
	}
	
	test "PUNTO 2: Al enviar un mensaje al chat clasico, todos sus participantes reducen la cantidad de espacio en memoria" {
		unChatClasico.agregarParticipante(unUsuario)
		unChatClasico.enviar(unMensajeTexto)
		assert.equals(1000 - 42.7, unUsuario.cantMemoria())
	}
	
	test "PUNTO 2: Al enviar un mensaje y no ser participante del chat clasico, se lanza una excepcion" {
		unChatClasico.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("El usuario emisor no es un participante del chat", {unChatClasico.enviar(unMensajeGif)})
	}
	
	test "PUNTO 2: Al enviar un mensaje donde algun participante del chat clasico no posea memoria suficiente, se lanza una excepcion" {
		unChatClasico.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("Algun participante no posee espacio suficiente en memoria", {unChatClasico.enviar(unMensajeImagen)})
	}
	
	test "Es posible obtener la cantidad de mensajes almacenados en el chat clasico" {
		unChatClasico.agregarParticipante(unDuenio)
		unChatClasico.agregarParticipante(unUsuario)
		unChatClasico.enviar(unMensajeTexto)
		assert.equals(1, unChatClasico.cantMensajes())
	}
	
	test "PUNTO 1 - Es posible obtener el espacio ocupado por el chat" {
		unChatClasico.agregarParticipante(unUsuario)
		unChatClasico.enviar(unMensajeTexto)
		unChatClasico.enviar(unMensajeAudio)
		unChatClasico.enviar(unMensajeContacto)
		assert.equals(42.7 + 98.6 + 8.9, unChatClasico.peso())
	}
	
	test "Es posible saber si posee algun mensaje que contiene un texto dado por el nombre del emisor" {
		unChatClasico.agregarParticipante(unUsuario)
		unChatClasico.enviar(unMensajeTexto)
		
		assert.that(unChatClasico.contiene("Pepito"))
		assert.notThat(unChatClasico.contiene("Usuario"))
	}
	
	test "Es posible saber si posee algun mensaje que contiene un texto dado por el tipo de contenido del mensaje" {
		unChatClasico.agregarParticipante(unUsuario)
		unChatClasico.enviar(unMensajeTexto)
		
		assert.that(unChatClasico.contiene("que tal"))
		assert.notThat(unChatClasico.contiene("Chau. Buena suerte"))
	}
}

describe "Chats premium" {
	// DIFUSION.
	test "Al verificar que no se cumple la restriccion adicional del chat premium de difusion, lanza una excepcion" {
		unChatPremiumDifusion.agregarParticipante(unDuenio)
		unChatPremiumDifusion.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("No cumple con la restriccion del chat premium", {unChatPremiumDifusion.verificarRestriccionAdicional(unMensajeTexto)})
	}
	
	test "PUNTO 2: Al enviar un mensaje al chat premium de difusion, el mensaje se almacena en dicho chat" {
		const otroMensajeTexto = new Mensaje(emisor = unDuenio, tipoContenido = unTexto)
		
		unChatPremiumDifusion.agregarParticipante(unDuenio)
		unChatPremiumDifusion.agregarParticipante(unUsuario)
		unChatPremiumDifusion.enviar(otroMensajeTexto)
		assert.equals([otroMensajeTexto], unChatPremiumDifusion.mensajes())
	}
	
	test "PUNTO 2: Al enviar un mensaje al chat premium de difusion, todos sus participantes reducen la cantidad de espacio en memoria" {
		const otroMensajeTexto = new Mensaje(emisor = unDuenio, tipoContenido = unTexto)
		
		unChatPremiumDifusion.agregarParticipante(unDuenio)
		unChatPremiumDifusion.agregarParticipante(unUsuario)
		unChatPremiumDifusion.enviar(otroMensajeTexto)
		assert.equals(1000 - 42.7, unDuenio.cantMemoria())
		assert.equals(1000 - 42.7, unUsuario.cantMemoria())
	}
	
	test "PUNTO 2: Al enviar un mensaje y no ser participante del chat premium de difusion, se lanza una excepcion" {
		unChatPremiumDifusion.agregarParticipante(unDuenio)
		unChatPremiumDifusion.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("El usuario emisor no es un participante del chat", {unChatPremiumDifusion.enviar(unMensajeGif)})
	}
	
	test "PUNTO 2: Al enviar un mensaje donde algun participante del chat premium de difusion no posea memoria suficiente, se lanza una excepcion" {
		unChatPremiumDifusion.agregarParticipante(unDuenio)
		unChatPremiumDifusion.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("Algun participante no posee espacio suficiente en memoria", {unChatPremiumDifusion.enviar(unMensajeImagen)})
	}
	
	test "PUNTO 2: Al enviar un mensaje donde no se cumpla la restriccion del chat premium de difusion, se lanza una excepcion" {
		unChatPremiumDifusion.agregarParticipante(unDuenio)
		unChatPremiumDifusion.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("No cumple con la restriccion del chat premium", {unChatPremiumDifusion.enviar(unMensajeTexto)})
	}
	
	// RESTRINGIDO.
	test "Al verificar que no se cumple la restriccion adicional del chat premium restringido, lanza una excepcion" {
		const otroChatPremiumRestringido = new ChatPremium(duenio = unDuenio, otraRestriccion = new Restringido(limite = 0))
		
		otroChatPremiumRestringido.agregarParticipante(unDuenio)
		otroChatPremiumRestringido.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("No cumple con la restriccion del chat premium", {otroChatPremiumRestringido.verificarRestriccionAdicional(unMensajeTexto)})
	}
	
	test "PUNTO 2: Al enviar un mensaje al chat premium restringido, el mensaje se almacena en dicho chat" {
		unChatPremiumRestringido.agregarParticipante(unDuenio)
		unChatPremiumRestringido.agregarParticipante(unUsuario)
		unChatPremiumRestringido.enviar(unMensajeTexto)
		assert.equals([unMensajeTexto], unChatPremiumRestringido.mensajes())
	}
	
	test "PUNTO 2: Al enviar un mensaje al chat premium restringido, todos sus participantes reducen la cantidad de espacio en memoria" {
		unChatPremiumRestringido.agregarParticipante(unDuenio)
		unChatPremiumRestringido.agregarParticipante(unUsuario)
		unChatPremiumRestringido.enviar(unMensajeTexto)
		assert.equals(1000 - 42.7, unDuenio.cantMemoria())
		assert.equals(1000 - 42.7, unUsuario.cantMemoria())
	}
	
	test "PUNTO 2: Al enviar un mensaje y no ser participante del chat premium restringido, se lanza una excepcion" {
		unChatPremiumRestringido.agregarParticipante(unDuenio)
		unChatPremiumRestringido.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("El usuario emisor no es un participante del chat", {unChatPremiumRestringido.enviar(unMensajeGif)})
	}
	
	test "PUNTO 2: Al enviar un mensaje donde algun participante del chat premium restringido no posea memoria suficiente, se lanza una excepcion" {
		unChatPremiumRestringido.agregarParticipante(unDuenio)
		unChatPremiumRestringido.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("Algun participante no posee espacio suficiente en memoria", {unChatPremiumRestringido.enviar(unMensajeImagen)})
	}
	
	test "PUNTO 2: Al enviar un mensaje donde no se cumpla la restriccion del chat premium restringido, se lanza una excepcion" {
		const otroChatPremiumRestringido = new ChatPremium(duenio = unDuenio, otraRestriccion = new Restringido(limite = 0))
		
		otroChatPremiumRestringido.agregarParticipante(unDuenio)
		otroChatPremiumRestringido.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("No cumple con la restriccion del chat premium", {otroChatPremiumRestringido.enviar(unMensajeTexto)})
	}
	
	// AHORRO.
	test "Al verificar que no se cumple la restriccion adicional del chat premium de ahorro, lanza una excepcion" {
		unChatPremiumAhorro.agregarParticipante(unDuenio)
		unChatPremiumAhorro.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("No cumple con la restriccion del chat premium", {unChatPremiumAhorro.verificarRestriccionAdicional(unMensajeImagen)})
	}
	
	test "PUNTO 2: Al enviar un mensaje al chat premium de ahorro, el mensaje se almacena en dicho chat" {
		unChatPremiumAhorro.agregarParticipante(unDuenio)
		unChatPremiumAhorro.agregarParticipante(unUsuario)
		unChatPremiumAhorro.enviar(unMensajeTexto)
		assert.equals([unMensajeTexto], unChatPremiumAhorro.mensajes())
	}
	
	test "PUNTO 2: Al enviar un mensaje al chat premium de ahorro, todos sus participantes reducen la cantidad de espacio en memoria" {
		unChatPremiumAhorro.agregarParticipante(unDuenio)
		unChatPremiumAhorro.agregarParticipante(unUsuario)
		unChatPremiumAhorro.enviar(unMensajeTexto)
		assert.equals(1000 - 42.7, unDuenio.cantMemoria())
		assert.equals(1000 - 42.7, unUsuario.cantMemoria())
	}
	
	test "PUNTO 2: Al enviar un mensaje y no ser participante del chat premium de ahorro, se lanza una excepcion" {
		unChatPremiumAhorro.agregarParticipante(unDuenio)
		unChatPremiumAhorro.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("El usuario emisor no es un participante del chat", {unChatPremiumAhorro.enviar(unMensajeGif)})
	}
	
	test "PUNTO 2: Al enviar un mensaje donde algun participante del chat premium de ahorro no posea memoria suficiente, se lanza una excepcion" {
		unChatPremiumAhorro.agregarParticipante(unDuenio)
		unChatPremiumAhorro.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("Algun participante no posee espacio suficiente en memoria", {unChatPremiumAhorro.enviar(unMensajeImagen)})
	}
	
	test "PUNTO 2: Al enviar un mensaje donde no se cumpla la restriccion del chat premium de ahorro, se lanza una excepcion" {
		const otroChatPremiumAhorro = new ChatPremium(duenio = unDuenio, otraRestriccion = new Ahorro(pesoMaximo = 50))
		
		otroChatPremiumAhorro.agregarParticipante(unDuenio)
		otroChatPremiumAhorro.agregarParticipante(unUsuario)
		assert.throwsExceptionWithMessage("No cumple con la restriccion del chat premium", {otroChatPremiumAhorro.enviar(unMensajeAudio)})
	}
	
	test "Es posible obtener el mensaje mas pesado del chat" {
		unChatClasico.agregarParticipante(unUsuario)
		unChatClasico.enviar(unMensajeTexto)
		unChatClasico.enviar(unMensajeAudio)
		unChatClasico.enviar(unMensajeContacto)
		assert.equals(unMensajeAudio, unChatClasico.mensajeMasPesado())
	}
}

// --------------------------------------------------
// ðŸ”¸ Usuarios.
// --------------------------------------------------
describe "Usuarios" {
	test "Es posible saber si hay suficiente espacio en memoria" {
		assert.that(unUsuario.hayMemoriaSuficiente(500))
		assert.notThat(unUsuario.hayMemoriaSuficiente(2000))
	}
	
	test "Es posible reducir el espacio de memoria" {
		unUsuario.reducirMemoria(500)
		assert.equals(500, unUsuario.cantMemoria())
	}
	
	test "Es posible saber si el nombre de usuario contiene un texto dado" {
		assert.that(unUsuario.contiene("Pepito"))
		assert.notThat(unUsuario.contiene("Usuario"))
	}
	
	test "PUNTO 3: Es posible obtener los chats del usuario que contienen un texto dado" {
		unChatClasico.agregarParticipante(unDuenio)
		unChatClasico.agregarParticipante(unUsuario)
		unChatClasico.enviar(unMensajeContacto)
		
		unChatPremiumAhorro.agregarParticipante(unDuenio)
		unChatPremiumAhorro.agregarParticipante(unUsuario)
		unChatPremiumAhorro.enviar(unMensajeTexto)
		
		assert.equals(#{unChatClasico}, unDuenio.buscarChatsCon("Usuario"))
		assert.equals(#{unChatPremiumAhorro}, unDuenio.buscarChatsCon("que tal"))
		assert.equals(#{unChatClasico, unChatPremiumAhorro}, unDuenio.buscarChatsCon("Pepito"))
	}
	
	test "PUNTO 4 - Es posible obtener los mensajes mÃ¡s pesados de cada uno de sus chat" {
		unChatClasico.agregarParticipante(unDuenio)
		unChatClasico.agregarParticipante(unUsuario)
		unChatClasico.enviar(unMensajeContacto)
		
		unChatPremiumAhorro.agregarParticipante(unDuenio)
		unChatPremiumAhorro.agregarParticipante(unUsuario)
		unChatPremiumAhorro.enviar(unMensajeTexto)
		unChatPremiumAhorro.enviar(unMensajeAudio)
		
		assert.equals([unMensajeContacto, unMensajeAudio], unDuenio.mensajesMasPesados())
	}
}