import Personajes.*
import Lugares.*

/* =========================================================
 ðŸ”¸ PERSONAJES.
===========================================================*/
describe "Homero" {	
	test "PUNTO 1.b: Es posible comprar donas por docena" {
		homero.comprarDonas()
		assert.equals(12, homero.cantDonas())
	}
	
	test "PUNTO 1.b: Es posible comer donas" {		
		// Si no tiene donas, entonces no come niguna.
		homero.comerDona()
		assert.equals(0, homero.cantDonas())
		
		// Si tiene donas, entonces se come una.
		homero.comprarDonas()
		homero.comerDona()
		assert.equals(11, homero.cantDonas())
	}
	
	test "Es posible saber si tiene donas" {
		// Si no compra donas, entonces no tiene donas.
		assert.notThat(homero.tieneDonas())
		
		// Si compra donas, entonces tiene donas.
		homero.comprarDonas()
		assert.that(homero.tieneDonas())
	}
	
	test "PUNTO 2.b: Es posible saber si esta distraido" {
		// Si tiene menos de 2 donas, entonces esta distraido.
		assert.that(homero.estaDistraido())
		
		// Si tiene 2 o mas donas, entonces no esta distraido.
		homero.comprarDonas()
		assert.notThat(homero.estaDistraido())		
	}
}

describe "Lenny" {
	test "Es posible hacer que tome cervezas" {
		lenny.tomarCerveza()
		assert.equals(1, lenny.cervezasTomadas())
	}
	
	test "PUNTO 5: Es posible saber si esta distrido" {
		// Si tomo menos de 3 cervezas, entonces no esta distraido
		assert.notThat(lenny.estaDistraido())
		
		// Si tomo mas de 3 cervezas, entonces esta distraido.
		lenny.tomarCerveza()
		lenny.tomarCerveza()
		lenny.tomarCerveza()
		lenny.tomarCerveza()
		assert.that(lenny.estaDistraido())
	}
}

describe "Mr. Burns" {
	test "PUNTO 6.a: Es posible saber si es pobre" {
		assert.notThat(mrBurns.esPobre())
	}
	
	test "PUNTO 6.b: Es posible despojarlo de sus riquezas" {
		mrBurns.despojarRiquezas()
		assert.that(mrBurns.esPobre())
	}
}

/*===========================================================
 ðŸ”¸ LUGARES.
===========================================================*/
describe "Planta Nuclear" {
	test "Es posible saber si hay muchas barras de uranio" {
		// Si hay menos de 10000 barras de uranio, entonces no hay muchas.
		assert.notThat(plantaNuclear.hayMuchoUranio())
		
		// Si hay mas de 10000 barras de uranio, entonces hay muchas.
		plantaNuclear.recibirCargamento(15000)
		assert.that(plantaNuclear.hayMuchoUranio())
	}
	
	test "PUNTO 2.c: Es posible saber si esta en peligro (Hay muchas barras de uranio y el encargado distraido)" {
		// Si no hay muchas barras de uranio y el encargado esta distraido, entonces no esta en peligro.
		assert.notThat(plantaNuclear.estaEnPeligro())
		
		// Si no hay muchas barras de uranio y el encargado no esta distraido, entonces no esta en peligro.
		homero.comprarDonas()
		assert.notThat(plantaNuclear.estaEnPeligro())
		
		// Si hay muchas barras de uranio y el encargado no esta distraido, entonces no esta en peligro.
		plantaNuclear.recibirCargamento(15000)
		assert.notThat(plantaNuclear.estaEnPeligro())
		
		// Si hay muchas barras de uranio y el encargado esta distraido, entonces no esta en peligro.
		11.times{i => homero.comerDona()}
		assert.that(plantaNuclear.estaEnPeligro())
	}
	
	test "PUNTO 6.d: Es posible saber si esta en peligro (Mr. Burns se quedo pobre)" {
		// Si Mr. Burns no es pobre, entonces no esta en peligro.
		assert.notThat(plantaNuclear.estaEnPeligro())
		
		// Si Mr. Burns es pobre, entonces esta en peligro.
		mrBurns.despojarRiquezas()
		assert.that(plantaNuclear.estaEnPeligro())
	}
}