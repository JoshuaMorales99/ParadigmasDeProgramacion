import Parrilla.*
import Comidas.*
import Comensales.*

/** Si bien no se piden OBLIGATORIAMENTE todos estos tests realizados, los hice para practicar esta herramienta. :D */
/** Los que valen del punto 4, estan marcados con comentarios. */

// -------------------------------------------------------------
// ðŸ”¸ Mi universo.
// -------------------------------------------------------------
// COMIDAS DISPONIBLES.
const unaProvoleta = new Provoleta(peso = 300, tieneEmpanado = true)
const otraProvoleta = new Provoleta(peso = 10, tieneEmpanado = false)

const unaHamburguesaCarne = new HamburguesaCarne(pesoCarne = 300, pan = industrial)
const otraHamburguesaCarne = new HamburguesaCarne(pesoCarne = 10, pan = deMaiz)

const unaHamburguesaDoble = new HamburguesaDoble(pesoCarne = 300, pan = industrial)
const otraHamburguesaDoble = new HamburguesaDoble(pesoCarne = 10, pan = deMaiz)

const unCorteCarne = new CorteCarne(peso = 300, puntoCoccion = aPunto)
const otroCorteCarne = new CorteCarne(peso = 10, puntoCoccion = jugoso)

const parrillada = new Parrillada()

// COMENSALES.
const unComensalCeliaco = new Comensal(tipoComensal = celiaco, dinero = 100000)
const otroComensalCeliaco = new Comensal(tipoComensal = celiaco, dinero = 1000)

const unComensalPaladarFino = new Comensal(tipoComensal = paladarFino, dinero = 100000)
const otroComensalPaladarFino = new Comensal(tipoComensal = paladarFino, dinero = 1000)

const unComensalTodoTerreno = new Comensal(tipoComensal = todoTerreno, dinero = 100000)
const otroComensalTodoTerreno = new Comensal(tipoComensal = todoTerreno, dinero = 1000)

// UN MENU.
const unMenu = #{unaProvoleta, otraProvoleta, unaHamburguesaCarne, otraHamburguesaCarne, unaHamburguesaDoble, otraHamburguesaDoble, unCorteCarne, otroCorteCarne}
const unMenuCeliaco = #{otraProvoleta, otraHamburguesaCarne, otraHamburguesaDoble, unCorteCarne, otroCorteCarne}
const unMenuNoCeliaco = #{unaProvoleta, unaHamburguesaCarne, unaHamburguesaDoble}

// -------------------------------------------------------------
// ðŸ”¸ La Parrilla del nuevo Miguelito.
// -------------------------------------------------------------
describe "La parrilla del nuevo Miguelito" {
	test "Es posible obtener los platillos validos que un comensal dado puede comprar" {
		// Si el menu no posee platillos validos que un comensal dado puede comprar, entonces se obtiene un set vacio.
		parrillaMiguelito.agregarAMenu(unMenuNoCeliaco)
		assert.equals(#{}, parrillaMiguelito.platillosValidosPara(unComensalCeliaco))
		
		// Si el menu posee platillos validos que un comensal dado puede comprar, entonces se obtienen dichos platillos.
		parrillaMiguelito.agregarAMenu(unMenu)
		assert.equals(unMenuCeliaco, parrillaMiguelito.platillosValidosPara(unComensalCeliaco))
	}
	
	test "Cuando no hay platillos validos que un comensal dado puede comprar, se puede lanzar la excepcion correspondiente" {
		parrillaMiguelito.agregarAMenu(unMenuNoCeliaco)
		assert.throwsExceptionWithMessage("No existe plato valido en el menu que pueda comprar el comensal dado", {parrillaMiguelito.verificarMenu(unComensalCeliaco)})
	}
	
	test "Es posible agregar una dada cantidad de fondos a sus ingresos" {
		parrillaMiguelito.agregarFondos(10000)
		assert.equals(10000, parrillaMiguelito.ingresos())
	}
	
	test "Es posible cobrarle el platillo escogido al comensal dado" {
		parrillaMiguelito.agregarAMenu(unMenu)
		parrillaMiguelito.cobrar(unComensalCeliaco)
		// Del menu, elije 'unCorteCarne' por tener la valoracion mas alta. Por lo tanto, le sale 31200.
		assert.equals(68800, unComensalCeliaco.dinero())
		assert.equals(31200, parrillaMiguelito.ingresos())
	}
	
	/** PARTE 4b - Test de un gustito en la parrilla. */
	test "Es posible ofrecerle el menu a un comensal y que este pueda comprarlo" {
		parrillaMiguelito.agregarAMenu(unMenu)
		parrillaMiguelito.ofrecerMenuA(unComensalCeliaco)
		// Del menu, elije 'unCorteCarne' por tener la valoracion mas alta. Por lo tanto, le sale 31200.
		assert.equals(68800, unComensalCeliaco.dinero())
		assert.equals(31200, parrillaMiguelito.ingresos())
		assert.equals(#{unComensalCeliaco}, parrillaMiguelito.historialComensales())
	}
	
	/** PARTE 4b - Test de un gustito en la parrilla. */
	test "Cuando se le ofrece un menu a un comensal y este no puede comprar ningun platillo, se lanza la excepcion correspondiente" {
		parrillaMiguelito.agregarAMenu(unMenuNoCeliaco)
		assert.throwsExceptionWithMessage("No existe plato valido en el menu que pueda comprar el comensal dado", {parrillaMiguelito.ofrecerMenuA(unComensalCeliaco)})
	}
	
	test "Es posible saber la cantidad de comensales registrados en el historial" {
		parrillaMiguelito.agregarAlHistorial(unComensalCeliaco)
		parrillaMiguelito.agregarAlHistorial(unComensalPaladarFino)
		parrillaMiguelito.agregarAlHistorial(unComensalTodoTerreno)
		assert.equals(3, parrillaMiguelito.cantComensalesRegistrados())
	}
	
	test "Es posible saber la cantidad total de dinero a entregar a cada comensal registrado en el historial" {
		parrillaMiguelito.agregarAlHistorial(unComensalCeliaco)
		parrillaMiguelito.agregarAlHistorial(unComensalPaladarFino)
		parrillaMiguelito.agregarAlHistorial(unComensalTodoTerreno)
		assert.equals(300, parrillaMiguelito.cantTotalPromocion(100))
	}
	
	test "Cuando no hay suficientes ingresos para realizar la promocion, se puede lanzar la excepcion correspondiente" {
		assert.throwsExceptionWithMessage("No hay suficientes ingresos para realizar la promocion", {parrillaMiguelito.verificarIngresos(300)})
	}
	
	test "Es posible quitar una dada cantidad de fondos a sus ingresos" {
		parrillaMiguelito.agregarFondos(10000)
		parrillaMiguelito.quitarFondos(1000)
		assert.equals(9000, parrillaMiguelito.ingresos())
	}
	
	test "Es posible entregar la promocion a cada comensal registrado en el historial" {
		parrillaMiguelito.agregarAlHistorial(unComensalCeliaco)
		parrillaMiguelito.agregarAlHistorial(unComensalPaladarFino)
		parrillaMiguelito.agregarAlHistorial(unComensalTodoTerreno)
		parrillaMiguelito.entregarPromocion(100)
		assert.equals(100100, unComensalCeliaco.dinero())
		assert.equals(100100, unComensalPaladarFino.dinero())
		assert.equals(100100, unComensalTodoTerreno.dinero())
	}
	
	test "Es posible realizar una promocion si hay suficientes ingresos" {
		parrillaMiguelito.agregarAlHistorial(unComensalCeliaco)
		parrillaMiguelito.agregarAlHistorial(unComensalPaladarFino)
		parrillaMiguelito.agregarAlHistorial(unComensalTodoTerreno)
		parrillaMiguelito.agregarFondos(10000)
		parrillaMiguelito.hacerPromocion(1000)
		assert.equals(7000, parrillaMiguelito.ingresos())
		assert.equals(101000, unComensalCeliaco.dinero())
		assert.equals(101000, unComensalPaladarFino.dinero())
		assert.equals(101000, unComensalTodoTerreno.dinero())
	}
	
	test "Cuando se quiere realizar una promocion, pero no hay suficientes ingresos para realizarla, se lanza la excepcion correspondiente"{
		parrillaMiguelito.agregarAlHistorial(unComensalCeliaco)
		parrillaMiguelito.agregarAlHistorial(unComensalPaladarFino)
		parrillaMiguelito.agregarAlHistorial(unComensalTodoTerreno)
		assert.throwsExceptionWithMessage("No hay suficientes ingresos para realizar la promocion", {parrillaMiguelito.hacerPromocion(1000)})
	}
	
	/** PARTE 4c - Test de cambio de habito. */
	test "Es posible realizar un cambio de hambito a un comensal. Es posible ofrecerle el menu al comensal y que este pueda comprarlo" {
		parrillaMiguelito.agregarAMenu(unMenu)
		unComensalTodoTerreno.problemasGastricos()
		parrillaMiguelito.ofrecerMenuA(unComensalTodoTerreno)
		// Del menu, elije 'unCorteCarne' por tener la valoracion mas alta y ser apto para celiacos. Por lo tanto, le sale 31200.
		assert.equals(68800, unComensalTodoTerreno.dinero())
		assert.equals(31200, parrillaMiguelito.ingresos())
		assert.equals(#{unComensalTodoTerreno}, parrillaMiguelito.historialComensales())
	}
	
	/** PARTE 4c - Test de cambio de habito. */
	test "Es posible realizar un cambio de habito a un comensal. Cuando se le ofrece un menu al comensal y este no puede comprar ningun platillo, se lanza la excepcion correspondiente" {
		parrillaMiguelito.agregarAMenu(unMenuNoCeliaco)
		unComensalTodoTerreno.problemasGastricos()
		assert.throwsExceptionWithMessage("No existe plato valido en el menu que pueda comprar el comensal dado", {parrillaMiguelito.ofrecerMenuA(unComensalTodoTerreno)})
	}
}

// -------------------------------------------------------------
// ðŸ”¸ Comidas disponibles en La Parrilla del nuevo Miguelito.
// -------------------------------------------------------------
describe "PROVOLETA" {
	test "Es posible saber si es apto para celiacos (No esta empanado)" {
		// Si no esta empanado, entonces es apto para celiacos.
		assert.that(otraProvoleta.aptoCeliacos())
		
		// Si esta empanado, entonces no es apto para celiacos.
		assert.notThat(unaProvoleta.aptoCeliacos())
	}
	
	test "Es posible obtener su valoracion (Depende de si es especial o no)" {
		// Si es especial, entonces obtiene 120 puntos de valoracion.
		assert.equals(120, unaProvoleta.valoracion())
		
		// Si no es especial, entonces obtienen 80 puntos de valoracion.
		assert.equals(80, otraProvoleta.valoracion())
	}
	
	test "Es posible saber si es especial (Pesa mas de 250 gramos)" {
		// Si pesa mas de 250 gramos, entonces es especial.
		assert.that(unaProvoleta.esEspecial())
		
		// Si pesa menos de 250 gramos, entonces no es especial.
		assert.notThat(otraProvoleta.esEspecial())
	}
	
	test "Es posible obtener el monto adicional por ser apto para celiacos (Igual a 1200)" {
		// Si es apto para celiacos, entonces su monto adicional es de 1200.
		assert.equals(1200, otraProvoleta.adicional())
		
		// Si no es apto para celiacos, entonces no tiene monto adicional.
		assert.equals(0, unaProvoleta.adicional())
	}
	
	test "Es posible obtener su precio total que es igual a 300 * su valoracion + adicional" {
		assert.equals(36000, unaProvoleta.precio())
	}
}

describe "HAMBURGUESA DE CARNE" {
	test "Es posible saber si es apta para celiacos (El pan utilizado en su elaboracion tambien lo es)" {
		// Si el pan utilizado en su elaboracion es apto para celiacos, entonces la hamburguesa tambien lo es.
		assert.that(otraHamburguesaCarne.aptoCeliacos())
		
		// Si el pan utilizado en su elaboracion no es apto para celiacos, entonces la hamburguesa tampoco lo es.
		assert.notThat(unaHamburguesaCarne.aptoCeliacos())
	}
	
	test "Es posible obtener su peso que es igual al peso del medallon de carne + peso del pan utilizado en su elaboracion" {
		assert.equals(360, unaHamburguesaCarne.peso())
	}
	
	test "Es posible obtener su valoracion que es igual a su peso / 10" {
		assert.equals(36, unaHamburguesaCarne.valoracion())
	}
	
	test "Es posible saber si es especial (Pesa mas de 250 gramos)" {
		// Si pesa mas de 250 gramos, entonces es especial.
		assert.that(unaHamburguesaCarne.esEspecial())
		
		// Si no pesa mas de 250 gramos, entonces no es especial.
		assert.notThat(otraHamburguesaCarne.esEspecial())
	}
	
	// No es necesario evaluar aqui tambien el monto adicional, pues los distintos tipos de comidas derivan de la misma clase (COMIDA). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien su precio, pues los distintos tipos de comifas derivan de la misma clase (COMIDA). Con hacerlo una sola vez, alcanza.
}

describe "HAMBURGUESA DOBLE" {
	test "Es posible obtener su peso que es igual a 2 * peso del medallon de carne + peso del pan utilizado en su elaboracion" {
		assert.equals(660, unaHamburguesaDoble.peso())
	}
	
	test "Es posible saber si es especial (Pesa mas de 500 gramos)" {
		// Si pesa mas de 500 gramos, entonces es especial.
		assert.that(unaHamburguesaDoble.esEspecial())
		
		// Si no pesa mas de 500 gramos, entonces no es especial.
		assert.notThat(otraHamburguesaDoble.esEspecial())
	}
	
	// No es necesario evaluar aqui tambien si es apta para celiacos, pues los dos tipos de hamburguesas derivan de la misma clase (HAMBURGUESA). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien su valoracion, pues los dos tipos de hamburguesas derivan de la misma clase (HAMBURGUESA). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien el monto adicional, pues los distintos tipos de comidas derivan de la misma clase (COMIDA). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien su precio, pues los distintos tipos de comifas derivan de la misma clase (COMIDA). Con hacerlo una sola vez, alcanza.
}

describe "CORTE DE CARNE" {
	test "Es posible saber si es apto para celiacos (Siempre lo es)"{
		assert.that(unCorteCarne.aptoCeliacos())
	}
	
	test "Es posible obtener su valoracion que es igual a 100" {
		assert.equals(100, unCorteCarne.valoracion())
	}
	
	test "Es posible saber si es especial (Pesa mas de 250 gramos y su punto de coccion es a punto)" {
		// Si pesa mas de 250 gramos y su punto de coccion es a punto, entonces es especial.
		assert.that(unCorteCarne.esEspecial())
		
		// Si pesa menos de 250 gramos y su punto de coccion es a punto, entonces no es especial.
		assert.notThat(new CorteCarne(peso = 10, puntoCoccion = aPunto).esEspecial())
		
		// Si pesa mas de 250 gramos y su punto de coccion no es a punto, entonces no es especial.
		assert.notThat(new CorteCarne(peso = 300, puntoCoccion = jugoso).esEspecial())
		
		// Si pesa menos de 250 gramos y su punto de coccion no es a punto, entonces no es especial.
		assert.notThat(otroCorteCarne.esEspecial())
	}
	
	// No es necesario evaluar aqui tambien el monto adicional, pues los distintos tipos de comidas derivan de la misma clase (COMIDA). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien su precio, pues los distintos tipos de comifas derivan de la misma clase (COMIDA). Con hacerlo una sola vez, alcanza.
}

/** PUNTO 4a - Tests de la Parrillada. */
describe "PARRILLADA" {
	test "Es posible saber si es apta para celiacos (Todas las comidas que la componen lo son)" {
		// Si todas las comidas que la componen son aptas para celiacos, entonces la parrillada tambien lo es.
		parrillada.agregarAParrillada([otraProvoleta, otraHamburguesaCarne, otraHamburguesaDoble, unCorteCarne])
		assert.that(parrillada.aptoCeliacos())
		
		// Si alguna comida que la compone no es apta para celiacos, entonces la parrillada tampoco lo es.
		parrillada.agregarAParrillada([unaHamburguesaDoble, otroCorteCarne])
		assert.notThat(parrillada.aptoCeliacos())
	}
	
	test "Es posible obtener su valoracion que es igual a la mayor valoracion de entre todas las comidas que la componen" {
		parrillada.agregarAParrillada([unaProvoleta, unaHamburguesaCarne, unaHamburguesaDoble, unCorteCarne])
		// Es igual a 120 por unaProvoleta, pues es la que tiene mayor valoracion.
		assert.equals(120, parrillada.valoracion())
	}
	
	test "Es posible saber la cantidad de comidas que la componen" {
		parrillada.agregarAParrillada([unaProvoleta, unaHamburguesaCarne, unaHamburguesaDoble, unCorteCarne])
		assert.equals(4, parrillada.cantComidas())
	}
	
	test "Es especial si pesa mas de 250 gramos y tiene al menos 3 comidas que la componen" {
		parrillada.agregarAParrillada([unaProvoleta, unaHamburguesaCarne, unaHamburguesaDoble, unCorteCarne])
		assert.that(parrillada.esEspecial())
	}
	
	test "No es especial si su peso es menor a 250 gramos, a pesar de que tenga al menos 3 comidas que la componen" {
		parrillada.agregarAParrillada([otraProvoleta, otraHamburguesaCarne, otraHamburguesaDoble, otroCorteCarne])
		assert.notThat(parrillada.esEspecial())
	}
	
	test "No es especial si no esta compuesta al menos por 3 comidas, a pesar de que pese mas de 250 gramos" {
		parrillada.agregarAParrillada([unaProvoleta, unaHamburguesaDoble])
		assert.notThat(parrillada.esEspecial())
	}
	
	test "No es especial si su peso es menor a 250 gramos y no esta compuesta al menos por 3 comidas" {
		parrillada.agregarAParrillada([otraProvoleta, otroCorteCarne])
		assert.notThat(parrillada.esEspecial())
	}
	
	// No es necesario evaluar aqui tambien el monto adicional, pues los distintos tipos de comidas derivan de la misma clase (COMIDA). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien su precio, pues los distintos tipos de comifas derivan de la misma clase (COMIDA). Con hacerlo una sola vez, alcanza.
}

// -------------------------------------------------------------
// ðŸ”¸ Comensales.
// -------------------------------------------------------------
describe "Comensal celiaco" {
	test "Es posible saber si le agrada la comida dada (Es apta para celiacos)" {
		// Si la comida es apta para celiacos, entonces le agrada.
		assert.that(unComensalCeliaco.leAgrada(otraProvoleta))
		
		// Si la comida no es apta para celiacos, entonces no le agrada.
		assert.notThat(unComensalCeliaco.leAgrada(unaProvoleta))
	}
	
	test "Es posible saber si puede pagar una comida dada" {
		// Si le alcanza el dinero, puede pagar la comida.
		assert.that(unComensalCeliaco.puedePagar(unaProvoleta))
		
		// Si no le alcanza el dinero, no puede pagar la comida.
		assert.notThat(otroComensalCeliaco.puedePagar(unaProvoleta))
	}
	
	test "Es posible saber si puede comprar una comida dada (Solo si le agrada y puede pagarla)" {
		// Si le agrada una comidad dada y puede pagarla, entonces puede comprarla.
		assert.that(unComensalCeliaco.puedeComprar(otraProvoleta))
		
		// Si no le agrada una comidad dada y puede pagarla, entonces no puede comprarla.
		assert.notThat(unComensalCeliaco.puedeComprar(unaProvoleta))
		
		// Si le agrada una comida dada y no puede pagarla, entonces no puede comprarla.
		assert.notThat(otroComensalCeliaco.puedeComprar(otraProvoleta))
		
		// Si no le agrada una comida dada y no puede pagarla, entonces no puede comprarla.
		assert.notThat(otroComensalCeliaco.puedeComprar(unaProvoleta))
	}
	
	test "Puede elegir el platillo del menu con mayor valoracion" {
		assert.equals(unaProvoleta, unComensalCeliaco.elegirPlatillo([unaProvoleta, unaHamburguesaCarne, unaHamburguesaDoble, unCorteCarne]))
	}
	
	test "Es posible descontar una dada cantidad de dinero" {
		unComensalCeliaco.pagar(1000)
		assert.equals(99000, unComensalCeliaco.dinero())
	}
	
	test "Es posible recibir la promocion de la parrilla" {
		unComensalCeliaco.recibirPromocion(1000)
		assert.equals(101000, unComensalCeliaco.dinero())
	}
	
	test "Es posible limitarlo Economicamente" {
		unComensalCeliaco.limitarEconomicamente()
		assert.equals(todoTerreno , unComensalCeliaco.tipoComensal())
	}
}

describe "Comensal paladar fino" {
	test "Es posible saber si le agrada la comida dada (Es especial y su valoracion es mayor a 100)" {
		// Si la comida dada es especial y su valoracion es mayor a 100, entonces le agrada.
		assert.that(unComensalPaladarFino.leAgrada(unaProvoleta))
		
		// Si la comida dada no es especial y su valoracion es menor a 100, entonces no le agrada.
		assert.notThat(unComensalPaladarFino.leAgrada(otraProvoleta))
	}
	
	// No es necesario evaluar aqui tambien si puede o no pagar una comida dada, pues los tres tipos de comensales derivan de la misma clase (COMENSAL). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien si puede o no compar una comida dada, pues los tres tipos de comensales derivan de la misma clase (COMENSAL). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien la eleccion del platillo segun la valoracion maxima, pues los tres tipos de comensales derivan de la misma clase (COMENSAL). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien el descontar una cantidad de dinero, pues los tres tipos de comensales derivan de la misma clase (COMENSAL). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien recibir promocion, pues los tres tipos de comensales derivan de la misma clase (COMENSAL). Con hacerlo una sola vez, alcanza.

	test "Es posible lanzarle problemas gastricos" {
		unComensalPaladarFino.problemasGastricos()
		assert.equals(celiaco , unComensalPaladarFino.tipoComensal())
	}
}

describe "Comensal todo terreno" {
	test "Es posible saber si le agrada la comida dada (Le agrada todo tipo de comida)" {
		assert.that(unComensalTodoTerreno.leAgrada(unaProvoleta))
	}
	
	// No es necesario evaluar aqui tambien si puede o no pagar una comida dada, pues derivan los tres tipos de comensales de la misma clase (COMENSAL). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien si puede o no compar una comida dada, pues derivan los tres tipos de comensales de la misma clase (COMENSAL). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien la eleccion del platillo segun la valoracion maxima, pues derivan los tres tipos de comensales de la misma clase (COMENSAL). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien el descontar una cantidad de dinero, pues los tres tipos de comensales derivan de la misma clase (COMENSAL). Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien recibir promocion, pues los tres tipos de comensales derivan de la misma clase (COMENSAL). Con hacerlo una sola vez, alcanza.

	test "Es posible desarrollarlo profesionalmente en el hambito degustacion"{
		unComensalTodoTerreno.desarrollarProfesionalmente()
		assert.equals(paladarFino , unComensalTodoTerreno.tipoComensal())
	}
}