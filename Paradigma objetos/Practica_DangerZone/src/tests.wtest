import Empleados.*
import Habilidades.*
import Misiones.*
import Roles.*

// -------------------------------------------------
// ðŸ”¸ Mi universo.
// -------------------------------------------------
// Empleados.
const unEspia = new Empleado(salud = 100, rol = espia)
const unOficinista = new Empleado(salud = 100, rol = new Oficinista(cantEstrellas = 0))
// Jefes.
const unJefeEspia = new Jefe(salud = 100, rol = espia)
const unJefeOficinista = new Jefe(salud = 100, rol = new Oficinista(cantEstrellas = 2))
// Equipo.
const unEquipo = new Equipo()
// Habilidades.
const unaHabilidad = new Habilidad()
const otraHabilidad = new Habilidad()
// Mision.
const unaMision = new Mision(peligrosidad = 30)

// -------------------------------------------------
// ðŸ”¸ Punto 1.
// -------------------------------------------------
describe "PUNTO 1" {
	test "Es posible saber si un espia esta incapacitado" {
		assert.notThat(unEspia.incapacitado())
	}
	
	test "Si la salud del espia es menor a 15, esta incapacitado" {
		unEspia.sufrirDanio(95)
		assert.that(unEspia.incapacitado())
	}
	
	test "Es posible saber si un oficinista esta incapacitado" {
		assert.notThat(unOficinista.incapacitado())
	}
	
	test "Si la salud del oficinista es menor a 40 - 5 * cantEstrellas, esta incapacitado" {
		unOficinista.sufrirDanio(95)
		assert.that(unOficinista.incapacitado())
	}
	
	test "Es posible saber si el jefe espia esta incapacitado" {
		assert.notThat(unJefeEspia.incapacitado())
	}
	
	test "Si la salud del jefe espia es menor a 15, esta incapacitado" {
		unJefeEspia.sufrirDanio(95)
		assert.that(unJefeEspia.incapacitado())
	}
	
	test "Es posible saber si el jefe oficinista esta incapacitado" {
		assert.notThat(unJefeOficinista.incapacitado())
	}
	
	test "Si la salud del jefe oficinista es menor a 40 - 5 * cantEstrellas, esta incapacitado" {
		unJefeOficinista.sufrirDanio(95)
		assert.that(unJefeOficinista.incapacitado())
	}
}

// -------------------------------------------------
// ðŸ”¸ Punto 2.
// -------------------------------------------------
describe "PUNTO 2" {
	test "Si el espia esta incapacitado, no puede utilizar la habilidad" {
		unEspia.aprender([unaHabilidad, otraHabilidad])
		unEspia.sufrirDanio(95)
		assert.notThat(unEspia.puedeUsar(unaHabilidad))
	}
	
	test "Si el espia no posee la habilidad, no puede utilizarla" {
		unEspia.aprender([unaHabilidad])
		assert.notThat(unEspia.puedeUsar(otraHabilidad))
	}
	
	test "Si el espia no esta incapacitado y tiene la habilidad, puede utilizarla" {
		unEspia.aprender([unaHabilidad, otraHabilidad])
		assert.that(unEspia.puedeUsar(unaHabilidad))
	}
	
	test "Si el oficinista esta incapacitado, no puede utilizar la habilidad" {
		unOficinista.aprender([unaHabilidad, otraHabilidad])
		unOficinista.sufrirDanio(95)
		assert.notThat(unOficinista.puedeUsar(unaHabilidad))
	}
	
	test "Si el oficinista no posee la habilidad, no puede utilizarla" {
		unOficinista.aprender([unaHabilidad])
		assert.notThat(unOficinista.puedeUsar(otraHabilidad))
	}
	
	test "Si el oficinista no esta incapacitado y tiene la habilidad, puede utilizarla" {
		unOficinista.aprender([unaHabilidad, otraHabilidad])
		assert.that(unOficinista.puedeUsar(unaHabilidad))
	}
	
	test "Si el jefe espia esta incapacitado, no puede utilizar la habilidad" {
		unJefeEspia.aprender([unaHabilidad, otraHabilidad])
		unJefeEspia.sufrirDanio(95)
		assert.notThat(unJefeEspia.puedeUsar(unaHabilidad))
	}
	
	test "Si el jefe espia no posee la habilidad, no puede utilizarla" {
		unJefeEspia.aprender([unaHabilidad])
		assert.notThat(unJefeEspia.puedeUsar(otraHabilidad))
	}
	
	test "Si el jefe espia no esta incapacitado y tiene la habilidad, puede utilizarla" {
		unJefeEspia.aprender([unaHabilidad, otraHabilidad])
		assert.that(unJefeEspia.puedeUsar(unaHabilidad))
	}
	
	test "Si el jefe espia tiene un subordinado que tiene la habilidad, pero el mismo esta incapacitado, no puede utilizarla" {
		unEspia.aprender([unaHabilidad, otraHabilidad])
		unEspia.sufrirDanio(95)
		unJefeEspia.agregarSubordinado(unEspia)
		assert.notThat(unJefeEspia.puedeUsar(unaHabilidad))
	}
	
	test "Si el jefe espia tiene un subordinado que tiene la habilidad y no esta incapacitado, puede utilizarla" {
		unEspia.aprender([unaHabilidad, otraHabilidad])
		unJefeEspia.agregarSubordinado(unEspia)
		assert.that(unJefeEspia.puedeUsar(unaHabilidad))
	}
	
	test "Si el jefe espia esta incapacitado, pero tiene un subordinado que tiene la habilidad y no esta incapacitado, puede utilizarla" {
		unEspia.aprender([unaHabilidad, otraHabilidad])
		unJefeEspia.agregarSubordinado(unEspia)
		unJefeEspia.sufrirDanio(95)
		assert.that(unJefeEspia.puedeUsar(unaHabilidad))
	}
	
	test "Si el jefe oficinista esta incapacitado, no puede utilizar la habilidad" {
		unJefeOficinista.aprender([unaHabilidad, otraHabilidad])
		unJefeOficinista.sufrirDanio(95)
		assert.notThat(unJefeOficinista.puedeUsar(unaHabilidad))
	}
	
	test "Si el jefe oficinista no posee la habilidad, no puede utilizarla" {
		unJefeOficinista.aprender([unaHabilidad])
		assert.notThat(unJefeOficinista.puedeUsar(otraHabilidad))
	}
	
	test "Si el jefe oficinista no esta incapacitado y tiene la habilidad, puede utilizarla" {
		unJefeOficinista.aprender([unaHabilidad, otraHabilidad])
		assert.that(unJefeOficinista.puedeUsar(unaHabilidad))
	}
	
	test "Si el jefe oficinista tiene un subordinado que tiene la habilidad, pero el mismo esta incapacitado, no puede utilizarla" {
		unEspia.aprender([unaHabilidad, otraHabilidad])
		unEspia.sufrirDanio(95)
		unJefeOficinista.agregarSubordinado(unEspia)
		assert.notThat(unJefeOficinista.puedeUsar(unaHabilidad))
	}
	
	test "Si el jefe oficinista tiene un subordinado que tiene la habilidad y no esta incapacitado, puede utilizarla" {
		unEspia.aprender([unaHabilidad, otraHabilidad])
		unJefeOficinista.agregarSubordinado(unEspia)
		assert.that(unJefeOficinista.puedeUsar(unaHabilidad))
	}
	
	test "Si el jefe oficinista esta incapacitado, pero tiene un subordinado que tiene la habilidad y no esta incapacitado, puede utilizarla" {
		unEspia.aprender([unaHabilidad, otraHabilidad])
		unJefeOficinista.agregarSubordinado(unEspia)
		unJefeOficinista.sufrirDanio(95)
		assert.that(unJefeOficinista.puedeUsar(unaHabilidad))
	}
}

// -------------------------------------------------
// ðŸ”¸ Punto 3.
// -------------------------------------------------
describe "PUNTO 3" {
	test "Si un empleado no puede cumplir la mision, se lanza una excepcion" {
		unaMision.agregarHabilidadesRequeridas([unaHabilidad, otraHabilidad])
		unEspia.aprender([unaHabilidad])
		assert.throwsExceptionWithMessage("No se puede completar la mision", {unaMision.comenzar(unEspia)})
	}
	
	test "Si un espia puede cumplir la mision, pierde salud (dependiendo de la peligrosida)" {
		unaMision.agregarHabilidadesRequeridas([unaHabilidad])
		unEspia.aprender([unaHabilidad])
		unaMision.comenzar(unEspia)
		assert.equals(70, unEspia.salud())
		assert.equals(#{unaHabilidad}, unEspia.habilidades())
	}
	
	test "Si un oficinista puede cumplir la mision, pierde salud (dependiendo de la peligrosidad) y suma una estrella" {
		unaMision.agregarHabilidadesRequeridas([unaHabilidad])
		unOficinista.aprender([unaHabilidad])
		unaMision.comenzar(unOficinista)
		assert.equals(70, unOficinista.salud())
		assert.equals(1, unOficinista.rol().cantEstrellas())
	}
	
	test "Si un oficinista puede cumplir la mision y tiene 2 estrellas, suma una y pasa a ser espia" {
		unaMision.agregarHabilidadesRequeridas([unaHabilidad])
		unJefeOficinista.aprender([unaHabilidad])
		unaMision.comenzar(unJefeOficinista)
		assert.equals(espia, unJefeOficinista.rol())
	}
	
	test "Si un equipo no puede cumplir la mision, se lanza una excepcion" {
		unaMision.agregarHabilidadesRequeridas([unaHabilidad, otraHabilidad])
		unEspia.aprender([unaHabilidad])
		unOficinista.aprender([unaHabilidad])
		unEquipo.agregarIntegrantes([unEspia, unOficinista])
		assert.throwsExceptionWithMessage("No se puede completar la mision", {unaMision.comenzar(unEquipo)})
	}
	
	test "Si un equipo puede cumplir la mision, pierde salud (un tercio de la peligrosidad de la mision)" {
		unaMision.agregarHabilidadesRequeridas([unaHabilidad, otraHabilidad])
		unEspia.aprender([unaHabilidad])
		unOficinista.aprender([otraHabilidad])
		unEquipo.agregarIntegrantes([unEspia, unOficinista])
		unaMision.comenzar(unEquipo)
		assert.equals(90, unEspia.salud())
		assert.equals(90, unOficinista.salud())
	}
	
	test "Si un equipo puede cumplir la mision, los que tiene el rol de espia, aprenden habilidades" {
		unaMision.agregarHabilidadesRequeridas([unaHabilidad, otraHabilidad])
		unEspia.aprender([unaHabilidad])
		unOficinista.aprender([otraHabilidad])
		unEquipo.agregarIntegrantes([unEspia, unOficinista])
		unaMision.comenzar(unEquipo)
		assert.equals(#{unaHabilidad, otraHabilidad}, unEspia.habilidades())
	}
	
	test "Si un equipo puede cumplir la mision, los que tienen el rol de oficinistas, suman una estrella" {
		unaMision.agregarHabilidadesRequeridas([unaHabilidad, otraHabilidad])
		unEspia.aprender([unaHabilidad])
		unOficinista.aprender([otraHabilidad])
		unEquipo.agregarIntegrantes([unEspia, unOficinista])
		unaMision.comenzar(unEquipo)
		assert.equals(1, unOficinista.rol().cantEstrellas())
	}
	
	test "Si un equipo puede cumplir la mision, los que tienen el rol de oficinistas con 2 estrellas, suman una y pasan a ser espias" {
		unaMision.agregarHabilidadesRequeridas([unaHabilidad, otraHabilidad])
		unEspia.aprender([unaHabilidad])
		unJefeOficinista.aprender([otraHabilidad])
		unEquipo.agregarIntegrantes([unEspia, unJefeOficinista])
		unaMision.comenzar(unEquipo)
		assert.equals(espia, unJefeOficinista.rol())
	}
}