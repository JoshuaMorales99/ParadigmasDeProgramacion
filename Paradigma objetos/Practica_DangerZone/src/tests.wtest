import Empleados.*
import Habilidades.*
import Misiones.*
import Roles.*

// -------------------------------------------------
// ðŸ”¸ Mi universo.
// -------------------------------------------------
// Empleados.
const unEspia = new Empleado(salud = 100, rol = espia)
const unOficinista = new Empleado(salud = 100, rol = new Oficinista(cantEstrellas = 0))
// Jefes.
const unJefeEspia = new Jefe(salud = 100, rol = espia)
const unJefeOficinista = new Jefe(salud = 100, rol = new Oficinista(cantEstrellas = 2))
// Equipo.
const unEquipo = new Equipo()
// Habilidades.
const unaHabilidad = new Habilidad()
const otraHabilidad = new Habilidad()
// Mision.
const unaMision = new Mision(peligrosidad = 30)

// -------------------------------------------------
// ðŸ”¸ Punto 1.
// -------------------------------------------------
describe "PUNTO 1" {
	/** ESPIA */
	test "Es posible saber si un espia esta incapacitado" {
		// Si su salud es mayor a 15, entonces no esta incapacitado.
		assert.notThat(unEspia.incapacitado())
		
		// Si su salud es menor a 15, entonces esta incapacitado.
		unEspia.sufrirDanio(95)
		assert.that(unEspia.incapacitado())
	}
	
	/** OFICINISTA */
	test "Es posible saber si un oficinista esta incapacitado" {
		// Si su salud es mayor a 40 - 5 * cantEstrellas, entonces no esta incapacitado.
		assert.notThat(unOficinista.incapacitado())
		
		// Si su salud es menor a 40 - 5 * cantEstrellas, entonces esta incapacitado.
		unOficinista.sufrirDanio(95)
		assert.that(unOficinista.incapacitado())
	}
	
	/** JEFE ESPIA */
	test "Es posible saber si el jefe espia esta incapacitado" {
		// Si su salud es mayor a 15, entonces no esta incapacitado.
		assert.notThat(unJefeEspia.incapacitado())
		
		// Si su salud es menor a 15, entonces esta incapacitado.
		unJefeEspia.sufrirDanio(95)
		assert.that(unJefeEspia.incapacitado())
	}
	
	/** JEFE OFICINISTA */
	test "Es posible saber si el jefe oficinista esta incapacitado" {
		// Si su salud es mayor a 40 - 5 * cantEstrellas, entonces no esta incapacitado.
		assert.notThat(unJefeOficinista.incapacitado())
		
		// Si su salud es menor a 40 - 5 * cantEstrellas, entonces esta incapacitado.
		unJefeOficinista.sufrirDanio(95)
		assert.that(unJefeOficinista.incapacitado())
	}
}

// -------------------------------------------------
// ðŸ”¸ Punto 2.
// -------------------------------------------------
describe "PUNTO 2" {
	/** ESPIA */
	test "Es posible saber si un espia puede usar una habilidad dada" {
		// Si no esta incapacitado y tiene la habilidad, entonces puede usarla.
		unEspia.aprender([unaHabilidad])
		assert.that(unEspia.puedeUsar(unaHabilidad))
		
		// Si no esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unEspia.puedeUsar(otraHabilidad))
		
		// Si esta incapacitado y tiene la habilidad, entonces no puede usarla.
		unEspia.sufrirDanio(95)
		assert.notThat(unEspia.puedeUsar(unaHabilidad))
		
		// Si esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unEspia.puedeUsar(otraHabilidad))
	}
	
	/** OFICINISTA */
	test "Es posible saber si un oficinista puede usar una habilidad dada" {
		// Si no esta incapacitado y tiene la habilidad, entonces puede usarla.
		unOficinista.aprender([unaHabilidad])
		assert.that(unOficinista.puedeUsar(unaHabilidad))
		
		// Si no esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unOficinista.puedeUsar(otraHabilidad))
		
		// Si esta incapacitado y tiene la habilidad, entonces no puede usarla.
		unOficinista.sufrirDanio(95)
		assert.notThat(unOficinista.puedeUsar(unaHabilidad))
		
		// Si esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unOficinista.puedeUsar(otraHabilidad))
	}
	
	/** JEFE ESPIA */
	test "Es posible saber si un jefe espia puede usar una habilidad dada" {
		// Si no esta incapacitado y tiene la habilidad, entonces puede usarla.
		unJefeEspia.aprender([unaHabilidad])
		assert.that(unJefeEspia.puedeUsar(unaHabilidad))
		
		// Si no esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unJefeEspia.puedeUsar(otraHabilidad))
		
		// Si esta incapacitado y tiene la habilidad, entonces no puede usarla.
		unJefeEspia.sufrirDanio(95)
		assert.notThat(unJefeEspia.puedeUsar(unaHabilidad))
		
		// Si esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unJefeEspia.puedeUsar(otraHabilidad))
	}
	
	test "Es posible saber si un jefe espia no incapacitado puede usar una habilidad dada si su subordinado la posee" {
		// Si su subordinado no esta incapacitado y tiene la habilidad, entonces puede usarla.
		unEspia.aprender([unaHabilidad])
		unJefeEspia.agregarSubordinado(unEspia)
		assert.that(unJefeEspia.puedeUsar(unaHabilidad))
		
		// Si su subordinado no esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unJefeEspia.puedeUsar(otraHabilidad))
		
		// Si su subordinado esta incapacitado y tiene la habilidad, entonces no puede usarla.
		unEspia.sufrirDanio(95)
		assert.notThat(unJefeEspia.puedeUsar(unaHabilidad))
		
		// Si su subordinado esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unJefeEspia.puedeUsar(otraHabilidad))
	}
	
	test "Es posible saber si un jefe espia incapacitado puede usar una habilidad dada si su subordinado la posee" {
		// Si su subordinado no esta incapacitado y tiene la habilidad, entonces puede usarla.
		unEspia.aprender([unaHabilidad])
		unJefeEspia.agregarSubordinado(unEspia)
		unJefeEspia.sufrirDanio(95)
		assert.that(unJefeEspia.puedeUsar(unaHabilidad))
		
		// Si su subordinado no esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unJefeEspia.puedeUsar(otraHabilidad))
		
		// Si su subordinado esta incapacitado y tiene la habilidad, entonces no puede usarla.
		unEspia.sufrirDanio(95)
		assert.notThat(unJefeEspia.puedeUsar(unaHabilidad))
		
		// Si su subordinado esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unJefeEspia.puedeUsar(otraHabilidad))
	}
	
	/** JEFE OFICINISTA */
	test "Es posible saber si un jefe oficinista puede usar una habilidad dada" {
		// Si no esta incapacitado y tiene la habilidad, entonces puede usarla.
		unJefeOficinista.aprender([unaHabilidad])
		assert.that(unJefeOficinista.puedeUsar(unaHabilidad))
		
		// Si no esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unJefeOficinista.puedeUsar(otraHabilidad))
		
		// Si esta incapacitado y tiene la habilidad, entonces no puede usarla.
		unJefeOficinista.sufrirDanio(95)
		assert.notThat(unJefeOficinista.puedeUsar(unaHabilidad))
		
		// Si esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unJefeOficinista.puedeUsar(otraHabilidad))
	}
	
	test "Es posible saber si un jefe oficinista no incapacitado puede usar una habilidad dada si su subordinado la posee" {
		// Si su subordinado no esta incapacitado y tiene la habilidad, entonces puede usarla.
		unEspia.aprender([unaHabilidad])
		unJefeOficinista.agregarSubordinado(unEspia)
		assert.that(unJefeOficinista.puedeUsar(unaHabilidad))
		
		// Si su subordinado no esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unJefeOficinista.puedeUsar(otraHabilidad))
		
		// Si su subordinado esta incapacitado y tiene la habilidad, entonces no puede usarla.
		unEspia.sufrirDanio(95)
		assert.notThat(unJefeOficinista.puedeUsar(unaHabilidad))
		
		// Si su subordinado esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unJefeOficinista.puedeUsar(otraHabilidad))
	}
	
	test "Es posible saber si un jefe oficinista incapacitado puede usar una habilidad dada si su subordinado la posee" {
		// Si su subordinado no esta incapacitado y tiene la habilidad, entonces puede usarla.
		unEspia.aprender([unaHabilidad])
		unJefeOficinista.agregarSubordinado(unEspia)
		unJefeOficinista.sufrirDanio(95)
		assert.that(unJefeOficinista.puedeUsar(unaHabilidad))
		
		// Si su subordinado no esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unJefeOficinista.puedeUsar(otraHabilidad))
		
		// Si su subordinado esta incapacitado y tiene la habilidad, entonces no puede usarla.
		unEspia.sufrirDanio(95)
		assert.notThat(unJefeOficinista.puedeUsar(unaHabilidad))
		
		// Si su subordinado esta incapacitado y no tiene la habilidad, entonces no puede usarla.
		assert.notThat(unJefeOficinista.puedeUsar(otraHabilidad))
	}
}

// -------------------------------------------------
// ðŸ”¸ Punto 3.
// -------------------------------------------------
describe "PUNTO 3" {
	test "Es posible lanzar una excepcion si el empleado no puede cumplir la mision (No tiene todas las habilidades requeridas)" {
		unaMision.agregarHabilidadesRequeridas([unaHabilidad, otraHabilidad])
		unEspia.aprender([unaHabilidad])
		assert.throwsExceptionWithMessage("No se puede completar la mision", {unaMision.comenzar(unEspia)})
	}
	
	/** ESPIA */
	test "Es posible que un espia cumpla la mision (Pierde salud dependiendo de la peligrosida)"{
		unaMision.agregarHabilidadesRequeridas([unaHabilidad])
		unEspia.aprender([unaHabilidad])
		unaMision.comenzar(unEspia)
		assert.equals(70, unEspia.salud())
	}
	
	/** OFICINISTA */
	test "Es posible que un oficinista cumpla la mision (Pierde vida dependiendo de la peligrosidad y suma una estrella)"{
		unaMision.agregarHabilidadesRequeridas([unaHabilidad])
		unOficinista.aprender([unaHabilidad])
		unaMision.comenzar(unOficinista)
		assert.equals(70, unOficinista.salud())
		assert.equals(1, unOficinista.rol().cantEstrellas())
	}
	
	test "Es posible que un oficinista pase a ser espia por cumplir la mision y poseer 2 estrellas" {
		unaMision.agregarHabilidadesRequeridas([unaHabilidad])
		unJefeOficinista.aprender([unaHabilidad])
		unaMision.comenzar(unJefeOficinista)
		assert.equals(espia, unJefeOficinista.rol())
	}
	
	/** EQUIPO */
	test "Es posible lanzar una excepcion si el equipo no puede cumplir la mision (Al menos uno de sus integrantes puede usar todas las habilidades requeridas)" {
		unaMision.agregarHabilidadesRequeridas([unaHabilidad, otraHabilidad])
		unEspia.aprender([unaHabilidad])
		unOficinista.aprender([unaHabilidad])
		unEquipo.agregarIntegrantes([unEspia, unOficinista])
		assert.throwsExceptionWithMessage("No se puede completar la mision", {unaMision.comenzar(unEquipo)})
	}
	
	test "Es posible que el equipo cumpla la mision"{
		unaMision.agregarHabilidadesRequeridas([unaHabilidad, otraHabilidad])
		unEspia.aprender([unaHabilidad])
		unOficinista.aprender([otraHabilidad])
		unEquipo.agregarIntegrantes([unEspia, unOficinista, unJefeEspia, unJefeOficinista])
		unaMision.comenzar(unEquipo)
		
		// Todos los integrantes reciban un tercio del daÃ±o total.
		assert.equals(90, unEspia.salud())
		assert.equals(90, unOficinista.salud())
		assert.equals(90, unJefeEspia.salud())
		assert.equals(90, unJefeOficinista.salud())
		
		// Los espias aprenden habilidades.
		assert.equals(#{unaHabilidad, otraHabilidad}, unEspia.habilidades())
		assert.equals(#{unaHabilidad, otraHabilidad}, unJefeEspia.habilidades())
		
		// Los oficinistas suman una estrella.
		assert.equals(1, unOficinista.rol().cantEstrellas())
		
		// Los oficinista con 2 estrellass pasan a ser espias.
		assert.equals(espia, unJefeOficinista.rol())
	}
}