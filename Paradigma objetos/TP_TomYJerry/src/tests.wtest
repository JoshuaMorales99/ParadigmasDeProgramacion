import Cuidador.*
import Quilombero.*
import Casa.*

/*================================================================
ðŸ”¸ Cuidadores.
================================================================*/
describe "PUNTO 3: Tom" {
	test "Es posible gastar energia" {
		// Si se gasta menos de la energia que se tiene, entonces es igual a su energia - energia a gastar.
		tom.energia(20)
		tom.gastarEnergia(18)
		assert.equals(2, tom.energia())
		
		// Si se gasta mas de la energia que se tiene, entonces es igual a 0 (No puede ser negativa)
		tom.gastarEnergia(100)
		assert.equals(0, tom.energia())
	}
	
	test "Es posible limpiar el lugar que cuida (Pierde 40 de energia y limpia 100 puntos de suciedad)" {
		casa.ensuciar(200)
		tom.energia(50)
		tom.limpiar()
		assert.equals(10, tom.energia())
		assert.equals(100, casa.nivelSuciedad())
	}
	
	test "Es posible obtener su velocidad" {
		tom.energia(50)
		assert.equals(10, tom.velocidad())
	}
	
	test "Es posible saber si puede atrapar al quilombero" {
		// Si no es mas rapido que el quilombero, entonces no lo puede atrapar.
		assert.notThat(tom.puedeAtrapar(jerry))
		
		// Si es mas rapido que el quilombero, entonces lo puede atrapar.
		tom.energia(100)
		assert.that(tom.puedeAtrapar(jerry))
	}
	
	test "Es posible dormir (Incrementa su energia en 50)" {
		tom.energia(80)
		tom.dormir()
		assert.equals(130, tom.energia())
	}
	
	test "Es posible interrumpir su suenio (Pierde 20 de energia)" {
		tom.energia(50)
		tom.interrumpirSuenio()
		assert.equals(30, tom.energia())
	}
}

describe "Robocat" {
	test "Es posible limpiar el lugar que cuida (Hace una limpieza completa)" {
		casa.ensuciar(200)
		robocat.limpiar()
		assert.equals(0, casa.nivelSuciedad())
	}
}

describe "PUNTO 7: Spike" {
	test "Es posible enfadarlo en una cantidad dada" {
		spike.enfadar(2)
		assert.equals(2, spike.enfado())
	}
	
	test "Es posible ensuciar el lugar que cuida (10 * su nivel de enfado)" {
		spike.enfadar(2)
		spike.ensuciar()
		assert.equals(20, casa.nivelSuciedad())
	}
	
	test "Es posible saber si esta enfadado" {
		// Si su nivel de enfado es menor a 10, entonces no esta enfadado.
		assert.notThat(spike.estaEnfadado())
		
		// Si su nivel de enfado es mayor a 10, entonces esta enfadado.
		spike.enfadar(15)
		assert.that(spike.estaEnfadado())
	}
	
	test "Es posible limpiar el lugar que cuida" {
		// Si no esta enfadado, entonces limpia el lugar que cuida en 100 puntos.
		casa.ensuciar(200)
		spike.limpiar()
		assert.equals(100, casa.nivelSuciedad())
		
		// Si esta enfadado, entonces ensucia el lugar que cuida en vez de limpiarlo.
		spike.enfadar(15)
		spike.limpiar()
		assert.equals(250, casa.nivelSuciedad())
	}
	
	test "Es posible saber si puede atrapar al quilombero" {
		// Si no esta enfadado, entonces no puede atrapar al quilombero dado.
		assert.notThat(spike.puedeAtrapar(jerry))
		
		// Si esta enfadado, entonces puede atrapar al quilombero dado
		spike.enfadar(15)
		assert.that(spike.puedeAtrapar(jerry))
	}
	
	test "Es posible dormir (Reduce su nivel de enfado en 5 puntos)" {
		// Si su nivel de enfado es mayor a 5, entonces es igual a su nivel de enfado - 5.
		spike.enfadar(8)
		spike.dormir()
		assert.equals(3, spike.enfado())
		
		// Si su nivel de enfado es menor a 5, entonces es igual a 0 (No puede ser negativo)
		spike.dormir()
		assert.equals(0, spike.enfado())
	}
	
	test "Es posible interrumpir su suenio (Aumenta su nivel de enfado en 10 puntos)" {
		spike.interrumpirSuenio()
		assert.equals(10, spike.enfado())
	}
}

/*================================================================
ðŸ”¸ Quilomberos.
================================================================*/
describe "PUNTO 4: Jerry" {
	test "Es posible robar comida (Aumenta su peso en 1)" {
		jerry.robarComida()
		assert.equals(1, jerry.peso())
	}
	
	test "Es posible hacer quilombo (Ensucia la casa en 110 puntos y roba comida aumentando su peso en 1)" {
		jerry.hacerQuilombo()
		assert.equals(1, jerry.peso())
		assert.equals(110, casa.nivelSuciedad())
	}
	
	test "Es posible obtener su velocidad (10 - su peso)" {
		// Si su peso es menor a 10, entonces es igual a 10 - su peso.
		jerry.peso(5)
		assert.equals(5, jerry.velocidad())
		
		// Si su peso es mayor a 10, entonces es igual a 0 (Nu puede ser negativo)
		jerry.peso(10)
		assert.equals(0, jerry.velocidad())
	}
}

describe "Tuffy" {
	test "Es posible hacer quilombo (Hace ruido)" {
		tom.energia(100)
		tuffy.hacerQuilombo()
		assert.equals(80, tom.energia())
	}
}

describe "PUNTO 7: cerebro" {
	test "Es posible idear un plan malvado (Aumenta el doble de su inteligencia)" {
		cerebro.idearPlan()
		assert.equals(20, cerebro.inteligencia())
	}
	
	test "Es posible hacer quilombo (Idea un plan y ensucia la casa en 100 puntos)" {
		cerebro.hacerQuilombo()
		assert.equals(20, cerebro.inteligencia())
		assert.equals(100, casa.nivelSuciedad())
	}
}

/*================================================================
ðŸ”¸ Casa de Tom y Jerry.
================================================================*/
describe "Casa" {
	test "Es posible saber si hay un quilombero" {
		assert.notThat(casa.hayQuilombero())
		casa.quilombero(jerry)
		assert.that(casa.hayQuilombero())
	}
	
	test "Es posible sacar a un quilombero si el cuidador puede atraparlo" {
		// Si el cuidador no puede atrapar al quilombero, entonces no lo saca.
		casa.cuidador(tom)
		casa.quilombero(jerry)
		casa.intentarSacarQuilombero()
		assert.equals(jerry, casa.quilombero())
		
		// Si el cuidador puede atrapar al quilombero, entonces lo saca.
		tom.energia(100)
		casa.intentarSacarQuilombero()
		assert.equals(null, casa.quilombero())
	}
	
	test "PUNTO 1: Es posible pasar el dia" {
		// Si el cuidador no puede atrapar al quilombero, entonces se pasa el dia limpiando y sin poder sacar al quilombero.
		casa.quilombero(jerry)
		casa.ensuciar(150)
		casa.pasarDia()
		assert.equals(50, casa.nivelSuciedad())
		assert.equals(jerry, casa.quilombero())
		
		// Si el cuidador puede atrapar al quilombero, entonces pasa el dia limpiando y sacando al quilombero.
		tom.energia(100)
		casa.pasarDia()
		assert.equals(0, casa.nivelSuciedad())
		assert.equals(null, casa.quilombero())
	}
	
	test "PUNTO 2: Es posible pasar la noche" {
		casa.quilombero(jerry)
		casa.pasarNoche()
		assert.equals(50, tom.energia())
		assert.equals(1, jerry.peso())
		assert.equals(110, casa.nivelSuciedad())
	}
	
	test "Es posible ensuciar dado un cierto valor" {
		casa.ensuciar(10)
		assert.equals(10, casa.nivelSuciedad())
	}
	
	test "Es posible reducir el nivel de suciedad en una cantidad dada" {
		// Si el nivel de suciedad es mayor al nivel de limpieza, entonces es igual al nivel de suciedad - nivel de limpieza.
		casa.ensuciar(10)
		casa.limpiarSuciedad(8)
		assert.equals(2, casa.nivelSuciedad())
		
		// Si el nivel de suciedad es menor al nivel de limpieza, entonces es igual a 0 (No puede ser negativo)
		casa.limpiarSuciedad(10)
		assert.equals(0, casa.nivelSuciedad())
	}
	
	test "Es posible realizar una limpieza completa" {
		casa.ensuciar(10)
		casa.limpiezaCompleta()
		assert.equals(0, casa.nivelSuciedad())
	}
}