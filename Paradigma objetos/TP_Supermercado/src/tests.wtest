import Supermercado.*
import TipoVenta.*
import Carrito.*

/* =========================================================
 ðŸ”¸ MI UNIVERSO.
===========================================================*/
// Productos por venta unitaria.
const aceiteGirasol = supermercado.crearProductoDeVentaUnitaria("Aceite de girasol", 60.75)
// Productos por venta por peso.
const quesoCremoso = supermercado.crearProductoDeVentaPorPeso("Queso cremoso", 320, 0.3)

// Carritos de compra.
const carrito = new Carrito()

/* =========================================================
 ðŸ”¸ TIPO DE VENTAS.
===========================================================*/
describe "Venta unitaria" {
	test "Es posible obtener el precio a abonar (Igual al precio del producto)" {
		assert.equals(60.75, aceiteGirasol.precioAbonar())
	}
	
	test "Es posible obtener la descripcion (Igual al nombre del producto)" {
		assert.equals("Aceite de girasol", aceiteGirasol.descripcion())
	}
}

describe "Venta por peso" {
	test "Es posible obtener el precio a abonar (Precio por kilo * Peso del producto)" {
		assert.equals(96, quesoCremoso.precioAbonar())
	}
	
	test "Es posible obtener la descripcion (Nombre del producto x Peso del producto kg)" {
		assert.equals("Queso cremoso x 0.3 kg", quesoCremoso.descripcion())
	}
}

/* =========================================================
 ðŸ”¸ CARRITO.
===========================================================*/
describe "Carrito" {
	test "PUNTO 2.a: Es posible saber si el carrito de la compra esta vacio" {
		// Si no se agregan productos, entonces esta vacio.
		assert.that(carrito.estaVacio())
		
		// Si se agregan productos, entonces no esta vacio.
		carrito.agregar(quesoCremoso)
		assert.notThat(carrito.estaVacio())
	}
	
	test "PUNTO 2.b: Es posible obtener la cantidad de productos agregados" {
		// Si se no se tienen productos repetidos, entonces se contabilizan cada producto.
		carrito.agregar(aceiteGirasol)
		carrito.agregar(quesoCremoso)
		assert.equals(2, carrito.cantidadDeProductos())
		
		// Si se tienen productos repetidos, entonces se contabilizan como si fueran varios.
		carrito.agregar(aceiteGirasol)
		assert.equals(3, carrito.cantidadDeProductos())
	}
	
	test "PUNTO 2.c: Es posible obtener el total a abonar" {
		carrito.agregar(aceiteGirasol)
		carrito.agregar(aceiteGirasol)
		carrito.agregar(quesoCremoso)
		assert.equals(217.5, carrito.totalAbonar())
	}
	
	test "PUNTO 2.d: Es posible obtener el producto mas caro de los agregados" {
		carrito.agregar(aceiteGirasol)
		carrito.agregar(quesoCremoso)
		assert.equals(quesoCremoso, carrito.productoMasCaro())
	}
	
	test "Es posible obtener los detalles de los productos agregados" {
		carrito.agregar(quesoCremoso)
		carrito.agregar(aceiteGirasol)
		carrito.agregar(aceiteGirasol)
		assert.equals(["Queso cremoso x 0.3 kg", "Aceite de girasol", "Aceite de girasol"], carrito.descripcionesProductos())
	}
	
	test "Es posible obtener los detalles de los productos agregados de forma ordenada alfabeticamente" {
		carrito.agregar(aceiteGirasol)
		carrito.agregar(quesoCremoso)
		carrito.agregar(aceiteGirasol)
		assert.equals(["Aceite de girasol", "Aceite de girasol", "Queso cremoso x 0.3 kg"], carrito.descripcionesOrdenadas())
	}
	
	test "PUNTO 3: Es posible obtener el detalle de la compra" {
		carrito.agregar(quesoCremoso)
		carrito.agregar(aceiteGirasol)
		carrito.agregar(quesoCremoso)
		carrito.agregar(aceiteGirasol)
		assert.equals(#{"Aceite de girasol", "Queso cremoso x 0.3 kg"}, carrito.detalleDeCompra())
		
	}
}