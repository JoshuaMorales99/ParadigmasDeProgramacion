import Lugares.*
import Personajes.*

/*================================================================
ðŸ”¸ Lugares.
================================================================*/
describe "Jardin" {
	test "Es posible hacer crecer malezas (Incrementar en 5 la cantidad de malezas)" {
		jardin.crecerMalezas()
		assert.equals(35, jardin.malezas())
	}
	
	test "Es posible saber si esta desprolijo (Tiene una cantidad de malezas mayor a 20)" {
		// Si tiene una cantidad de malezas mayor a 20, entonce esta desprolijo.
		assert.that(jardin.desprolijo())
		
		// Si tiene una cantidad de malezas menor a 20, entonces no esta desprolijo.
		jardin.malezas(19)
		assert.notThat(jardin.desprolijo())
	}
	
	test "Es posible saber si el nivel de prolijidad es alto (Nivel de prolijidad mayor o igual a 10)" {
		// Si el nivel de prolijidad es mayor o igual a 10, entonces es un nivel alto de prolijidad.
		assert.that(jardin.nivelAltoProlijidad(10))
		
		// Si el nivel de prolijidad es menor a 10, entonces no es un nivel alto de prolijidad.
		assert.notThat(jardin.nivelAltoProlijidad(9))
	}
	
	test "Es posible saber si el nivel de prolijidad es medio (Nivel de prolijidad esta entre 3 y 9)" {
		// Si el nivel de prolijidad esta entre 3 y 9, entoces es un nivel medio de prolijidad.
		assert.that(jardin.nivelMedioProlijidad(9))
		assert.that(jardin.nivelMedioProlijidad(3))
		
		// Si el nivel de prolijidad no esta entre 3 y 9, entonces no es un nivel medio de prolijidad.
		assert.notThat(jardin.nivelMedioProlijidad(2))
	}
	
	test "Es posible emprolijarlo con un nivel de prolijidad dado" {
		// Si se emprolija con un nivel bajo de prolijidad, entonces no se reducen malezas.
		jardin.emprolijar(2)
		assert.equals(30, jardin.malezas())
		
		// Si se emprolija con un nivel medio de prolijidad, entonces la cantidad de malezas se reduce a la mitad.
		jardin.emprolijar(3)
		assert.equals(15, jardin.malezas())
		
		// Si se emprolija con un nivel alto de prolijidad, entonces queda sin malezas.
		jardin.emprolijar(10)
		assert.equals(0, jardin.malezas())
	}
	
	test "Es posible obtener la imagen del jardin" {
		// Si esta deprolijo, entonces se obtiene la imagen del jardin desprolijo.
		assert.equals("arbusto-desprolijo.png", jardin.image())
		
		// Si no esta desprolijo, entonces se obtiene la imagen del jardin prolijo.
		jardin.malezas(19)
		assert.equals("arbusto.png", jardin.image())
	}
}

describe "Spa" {
	test "Es posible atender a Olivia" {
		spa.atender(olivia)
		assert.equals(11, olivia.relax())
	}
	test "Es posible atender a Adriano" {
		// Si adriano no esta contracturado, entonces se descontractura por los masajes.
		adriano.contracturas(7)
		spa.atender(adriano)
		assert.equals(2, adriano.contracturas())
		
		// Si Adriano esta lastimado y su cantidad de contracturas es menor a 17, entonces se descontractura por el primer banio de vapor y el masaje.
		adriano.contracturas(16)
		spa.atender(adriano)
		assert.equals(9, adriano.contracturas())
		
		// Si Adriano esta lastimado y su cantidad de contractura es mayor a 17, entonces se decontractura por los banios de vapor y el masaje.
		adriano.contracturas(18)
		spa.atender(adriano)
		assert.equals(9, adriano.contracturas())
	}
	
	test "Es posible obtener la imagen del spa" {
		assert.equals("spa.png", spa.image())
	}
}

/*================================================================
ðŸ”¸ Personajes.
================================================================*/
describe "Olivia" {
	test "Es posible estresarla dado un nivel de estres" {
		// Si su nivel de relax es mayor al nivel de estres dado, entonces se estresa en una cantidada igual a su nivel de relax - nivel de estres dado.
		olivia.estresar(2)
		assert.equals(2, olivia.relax())
		
		// Si su nivel de relax es menor al nivel de estres dado, entonces su nivel de relax pasa a ser 1 (El nivel de relax no puede ser menor a 1)
		olivia.estresar(10)
		assert.equals(1, olivia.relax())
	}
	
	test "Es posible trabajar en el jardin dado" {
		// Si el jardin esta desprolijo, entonces se estresa 2 puntos al inicio, lo emprolija con un nivel de prolijidad igual al doble de su relax y se vuelve a estresar un punto.
		olivia.relax(6)
		olivia.trabajarEnJardin(jardin)
		assert.equals(15, jardin.malezas())
		assert.equals(3, olivia.relax())
		
		// Si el jardin esta prolijo, entonces no se estresa inicialmente, lo emprolija con un nivel de prolijidad igual al doble de su relax y se vuelve a estresar un punto.
		olivia.trabajarEnJardin(jardin)
		assert.equals(7, jardin.malezas())
		assert.equals(2, olivia.relax())
	}
	
	test "Es posible obtener la imagen de Olivia" {
		assert.equals("jardinera.png", olivia.image())
	}
	
	test "Es posible desestresarla dada una cantidad de desestres" {
		olivia.desestresar(10)
		assert.equals(14, olivia.relax())
	}
	
	test "Es posible recibir un masaje" {
		olivia.masajes()
		assert.equals(7, olivia.relax())
	}
	
	test "Es posible tomar un banio de vapor por un tiempo dado (El nivel de relax aumenta 1 punto cada 5 minutos que dura el baÃ±o de vapor)" {
		olivia.banioVapor(15)
		assert.equals(7, olivia.relax())
	}
}

describe "Adriano" {
	test "Es posible contracturarlo dado una cantidad de contractura" {
		// Si la cantidad a contracturar es menor a 7, entonces sera igual a la cantidad de contracturas que tiene + cantidad a contracturar.
		adriano.contracturar(2)
		assert.equals(2, adriano.contracturas())
		
		// Si la cantidad a contracturar es mayor a 7, entonces sera igual a la cantidad de contracturas que tiene + 7.
		adriano.contracturar(20)
		assert.equals(9, adriano.contracturas())
	}
	
	test "Es posible trabajar en el jardin dado" {
		// Si no esta lastimado, entonces lo emprolija en 5 punto y aumenta su cantidad de contracturas.
		adriano.trabajarEnJardin(jardin)
		assert.equals(15, jardin.malezas())
		assert.equals(7, adriano.contracturas())
		
		// Si esta lastimado, entonces lo emprolija en 1 punto y aumenta su cantidad de contracturas.
		adriano.contracturar(4)
		adriano.trabajarEnJardin(jardin)
		assert.equals(15, jardin.malezas())
		assert.equals(18, adriano.contracturas())
	}
	
	test "Es posible obtener la imagen de Adriano" {
		assert.equals("jardinero.png", adriano.image())
	}
	
	test "Es posible descontracturarlo dado una cantidad de descontractura" {
		// Si la cantidad de contractura es mayor a la cantidad de descontractura, entonces sera igual a la cantidad de contracturas - la cantidad de descontractura dada.
		adriano.contracturas(10)
		adriano.descontracturar(3)
		assert.equals(7, adriano.contracturas())
		
		// Si la cantidad de contractura es menor a la cantidad de contractura, entonces sera igual a 0 (No puede ser negativo)
		adriano.descontracturar(10)
		assert.equals(0, adriano.contracturas())
	}
	
	test "Es posible recibir masajes" {
		// Si su cantidad de contracturas es mayor a 5, entonces bajaran en cantidad de contracturas - 5.
		adriano.contracturas(8)
		adriano.masajes()
		assert.equals(3, adriano.contracturas())
		
		// Si su cantidad de contracturas es menor a 5, entonces bajaran a 0.
		adriano.masajes()
		assert.equals(0, adriano.contracturas())
	}
	
	test "Es posible tomar un banio de vapor por un tiempo dado (Solo si esta lastimado sus contracturas disminuyen en 2)" {
		// Si no esta lastimado, entonces no le afecta.
		adriano.contracturar(7)
		adriano.banioVapor(10)
		assert.equals(7, adriano.contracturas())
		
		// Si esta lastimado, entonces disminuye sus contracturas en 2 puntos.
		adriano.contracturar(7)
		adriano.banioVapor(10)
		assert.equals(12, adriano.contracturas())
	}
}