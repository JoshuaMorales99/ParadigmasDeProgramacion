import Carrera.*
import Lugares.*
import Vehiculos.*

/*================================================================
ðŸ”¸ Carrera.
================================================================*/
describe "Carrera" {	
	test "Es posible iniciar la carrera" {
		centroInscripcion.inscribir(alambiqueVeloz) // TODO COLOCAR 2 VEHICULOS MAS.
		carrera.iniciarCarrera()
		assert.equals(90, alambiqueVeloz.combustible())
	}
	
	test "Es posible obtener al ganador de la carrera" {
		centroInscripcion.inscribir(alambiqueVeloz) // TODO COLOCAR 2 VEHICULOS MAS.
		carrera.iniciarCarrera()
		assert.equals(alambiqueVeloz, carrera.ganador())
	}
}

describe "Centro de incscripcion" {
	test "Es posible saber si un vehiculo dado puede competir" {
		// Si puede visitar el lugar de la carrera, entonces puede competir.
		assert.that(centroInscripcion.puedeCompetir(alambiqueVeloz))
		
		// Si no puede visitar el lugar de la carrera, entonces no puede competir.
		alambiqueVeloz.consumirCombustible(50)
		assert.notThat(centroInscripcion.puedeCompetir(alambiqueVeloz))
	}
	
	test "Es posible inscribir un vehiculo dado a la carrera" {
		// Si puede competir, entonces se lo inscribe en la lista de aceptados.
		centroInscripcion.inscribir(alambiqueVeloz)
		assert.equals([alambiqueVeloz], carrera.aceptados())
		assert.equals([], carrera.rechazados())
		
		// Si no puede competir, entonces se lo inscribe en la lista de rechazados.
		// centroInscripcion.inscribir(alambiqueVeloz) TODO COLOCAR NUEVO VEHICULO.
		// assert.equals([], carrera.aceptados())
		// assert.equals([], carrera.rechazados())
	}
	
	test "Es posible obtener todos los vehiculos anotados a la carrera" {
		centroInscripcion.inscribir(alambiqueVeloz) // TODO COLOCAR 2 VEHICULOS MAS.
		assert.equals([alambiqueVeloz], centroInscripcion.vehiculosAnotados())
	}
	
	test "Es posible reinscribir los vehiculos dados" { // TODO SE PUEDE MEJORAR PERO NECESITO MAS VEHICULOS.
		alambiqueVeloz.consumirCombustible(50)
		centroInscripcion.inscribir(alambiqueVeloz)
		carrera.lugar(bagdad)
		centroInscripcion.reinscribir([alambiqueVeloz])
		assert.equals([alambiqueVeloz], carrera.aceptados())
		assert.equals([], carrera.rechazados())
	}
	
	test "Es posible replanificar la carrera (Cambiar el lugar de la carrera y reinscribir los vehiculos inscriptos en la antigua carrera)" {
		alambiqueVeloz.consumirCombustible(50)
		centroInscripcion.inscribir(alambiqueVeloz) // TODO COLODAR 2 VEHICULOS MAS.
		centroInscripcion.replanificarCarrera(bagdad)
		assert.equals([alambiqueVeloz], carrera.aceptados())
		assert.equals([], carrera.rechazados())
	}
}

/*================================================================
ðŸ”¸ Lugares.
================================================================*/
describe "Paris" {
	test "Es posible saber si un vehiculo dado puede visitar el lugar (Puede desplazarse)" {
		// Si tiene el tanque lleno, el alambique puede visitarlo.
		assert.that(paris.puedeVisitar(alambiqueVeloz))
		
		// Si no tiene el tanque lleno, el alambique no puede visitarlo.
		alambiqueVeloz.consumirCombustible(40)
		assert.notThat(paris.puedeVisitar(alambiqueVeloz))
	}
}

describe "Buenos Aires" {
	test "Es posible saber si un vehiculo dado puede visitar el lugar (Es rapido)" {
		// Si es rapido, el vehiculo puede visitarlo.
		assert.that(buenosAires.puedeVisitar(alambiqueVeloz))
		
		// Si no es rapido, el vehiculo no puede visitarlo.
		// assert.notThat(buenosAires.puedeVisitar(rocomovil)) TODO COLOCAR NUEVO VEHICULO.
	}
}

describe "Bagdad" {
	test "Es posible saber si un vehiculo dado puede visitar el lugar (No hay restricciones)" {
		assert.that(bagdad.puedeVisitar(alambiqueVeloz))
	}
}

describe "Las Vegas" {
	test "Es posible saber si un vehiculo dado puede visitar el lugar (Misma restriccion del pais homenajeado)" {
		// Si tiene el tanque lleno, el vehiculo puede visitarlo (Restriccion del pais homenajeado).
		assert.that(lasVegas.puedeVisitar(alambiqueVeloz))
		
		// Si no tiene el tanque lleno, el vehiculo no puede visitarlo (Resticcion del pais homenaeado).
		alambiqueVeloz.consumirCombustible(40)
		assert.notThat(lasVegas.puedeVisitar(alambiqueVeloz))
	}
}

/*================================================================
ðŸ”¸ Vehiculos.
================================================================*/
describe "Alambique Veloz" {
	test "Es posible saber si posee el tanque lleno" {
		// Si tiene 100 de combustible, tiene tanque lleno.
		assert.that(alambiqueVeloz.tanqueLleno())
		
		// Si tiene menos de 100 de combustible, no tiene tanque lleno.
		alambiqueVeloz.consumirCombustible(40)
		assert.notThat(alambiqueVeloz.tanqueLleno())
	}
	
	test "Es posible saber si puede desplazarse (Tiene tanque lleno)" {
		// Si tiene tanque lleno, puede desplazarse.
		assert.that(alambiqueVeloz.puedeDesplazarse())
		
		// Si no tiene tanque lleno, no puede desplazarse.
		alambiqueVeloz.consumirCombustible(40)
		assert.notThat(alambiqueVeloz.tanqueLleno())
	}
	
	test "Es posible saber si es rapido (Siempre lo es)" {
		assert.that(alambiqueVeloz.rapido())
	}
	
	test "Es posible establecer una nueva cantidad de combustible en su tanque" {
		// No puede ser menor a cero.
		alambiqueVeloz.combustible(-10)
		assert.equals(0, alambiqueVeloz.combustible())
		
		// No puede ser mayor a la capacidad maxima de su tanque.
		alambiqueVeloz.combustible(1000)
		assert.equals(alambiqueVeloz.maximoTanque(), alambiqueVeloz.combustible())
	}
	
	test "Es posible consumir una cantidad de combustible dado" {
		alambiqueVeloz.consumirCombustible(40)
		assert.equals(60, alambiqueVeloz.combustible())
	}
	
	test "Es posible viajar (Al viajar, consume 10 de combustible)" {
		alambiqueVeloz.viajar()
		assert.equals(90, alambiqueVeloz.combustible())
	}
	
	test "Es posible obtener el tiempo que tarda en llegar a destino (Capacidad maxima del tanque / cantidad de combustible)" {
		alambiqueVeloz.consumirCombustible(60)
		assert.equals(2.5, alambiqueVeloz.tiempo())
	}
}

describe "Antigualla Blindada" {
	test "Es posible saber su velocidad" {
		assert.equals(47, antiguallaBlindada.velocidad())
	}
	
	test "Es posible saber si puede desplazarse (Cantidad de integrantes par)" {
		// Si tiene una cantidad impar de integrantes a bordo, entonces no puede desplazarse.
		assert.notThat(antiguallaBlindada.puedeDesplazarse())
		
		// Si tiene una cantidad par de integrantes a bordo, entonces puede desplazarse.
		antiguallaBlindada.eliminar('Mac')
		assert.that(antiguallaBlindada.puedeDesplazarse())
	}
	
	test "Es posible saber si es rapido (Velocidad es mayor a 30)" {
		// Si su velocidad es mayor a 30, entonces es rapido.
		assert.that(antiguallaBlindada.rapido())
		
		// Si su velocidad es menor a 30, entonces no es rapido.
		antiguallaBlindada.eliminar('Ring-A-Ding')
		antiguallaBlindada.eliminar('Rug-Bug-Benny')
		assert.notThat(antiguallaBlindada.rapido())
	}
	
	test "Es posible viajar (Pierde al primer integrante)" {
		antiguallaBlindada.viajar()
		assert.equals(['Ring-A-Ding', 'Mac', 'Danny', 'Rug-Bug-Benny', 'Willy', 'Kirby'] , antiguallaBlindada.integrantes())
	}
	
	test "Es posible obtener el tiempo que tarda en llegar a destino (Igual a su velocidad)" {
		assert.equals(47, antiguallaBlindada.tiempo())
	}
}

describe "Super Perrari" {
	test "Es posible saber si son tramposos" {
		// Si no colocaron trampas, entonces no son tramposos.
		assert.notThat(superPerrari.tramposo())
		
		// Si colocaron trampas, entonces son tramposos.
		superPerrari.colocarTrampas(1)
		assert.that(superPerrari.tramposo())
	}
	
	test "Es posible saber si puede desplazarse (Colocaron menos de 3 trampas)" {
		// Si colocaron menos de 3 trampas, entonces puede desplazarse.
		assert.that(superPerrari.puedeDesplazarse())
		
		// Si colocaron mas de 3 trampas, entonces no puede desplazarse.
		superPerrari.colocarTrampas(3)
		assert.notThat(superPerrari.puedeDesplazarse())
	}
	
	test "Es posible saber si es rapido (No son tramposos)" {
		// Si no son tramposos, entonces es rapido.
		assert.that(superPerrari.rapido())
		
		// Si son tramposos, entonces no es rapido.
		superPerrari.colocarTrampas(1)
		assert.notThat(superPerrari.rapido())
	}
	
	test "Es posible viajar (Colocan 2 trampas)" {
		superPerrari.viajar()
		assert.equals(2, superPerrari.trampasColocadas())
	}
	
	test "Es posible obtener el tiempo que tardan en llegar a destino (Trampas colocadas * 20)" {
		superPerrari.colocarTrampas(3)
		assert.equals(80, superPerrari.tiempo())
	}
}

describe "Auto Super Convertible" {
	test "Es posible saber si puede imitar a un vehiculo dado" {
		// Si esta entre los posibles vehiculos para imitar, entonces puede imitarlo.
		assert.that(autoSuperConvertible.puedeImitar(antiguallaBlindada))
		
		// Si no esta entre los posibles vehiculos para imitar, entonces no puede imitarlo.
		assert.notThat(autoSuperConvertible.puedeImitar(alambiqueVeloz))
	}
	
	test "Es posible imitar un vehiculo" {
		// Si puede imitar al vehiculo dado, entonces lo imita.
		autoSuperConvertible.imitar(antiguallaBlindada)
		assert.equals(antiguallaBlindada, autoSuperConvertible.vehiculoImitado())
		
		// Si no puede imitar al vehiculo dado, entonces no lo imita.
		autoSuperConvertible.imitar(alambiqueVeloz)
		assert.equals(antiguallaBlindada, autoSuperConvertible.vehiculoImitado())
	}
	
	test "Es posible saber si puede desplazarse (Si vehiculo imitado puede desplazarse)" {
		// Si el vehiculo imitado puede desplazarse, entonces este tambien puede.
		assert.that(autoSuperConvertible.puedeDesplazarse())
		
		// Si el vehiculo imitado no puede desplazarse, entonces este tampoco puede.
		autoSuperConvertible.imitar(antiguallaBlindada)
		assert.notThat(autoSuperConvertible.puedeDesplazarse())
	}
	
	test "Es posible saber si es rapido (Si vehiculo imitando es rapido)" {
		// Si el vehiculo imitado es rapido, entonces este tambien lo es.
		assert.that(autoSuperConvertible.rapido())
		
		// Si el vehiculo imitado no es rapido, entonces este tampoco lo es.
		antiguallaBlindada.eliminar('Ring-A-Ding')
		antiguallaBlindada.eliminar('Rug-Bug-Benny')
		autoSuperConvertible.imitar(antiguallaBlindada)
		assert.notThat(autoSuperConvertible.rapido())
	}
	
	test "Es posible obtener el tiempo que tardan en llegar a destino (Doble del vehiculo original)" {
		autoSuperConvertible.imitar(antiguallaBlindada)
		assert.equals(94, autoSuperConvertible.tiempo())
	}
}