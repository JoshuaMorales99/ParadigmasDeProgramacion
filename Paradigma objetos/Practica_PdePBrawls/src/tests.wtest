import Personajes.*
import Misiones.*

// --------------------------------------------------
// ðŸ”¸ Mi universo.
// --------------------------------------------------
// Personajes.
const unArqueroPerfecto = new Arquero(agilidad = 500, rango = 120)
const unArqueroEstrategia = new Arquero(agilidad = 25, rango = 120)
const unArqueroDestreza = new Arquero(agilidad = 500, rango = 10)
const unArqueroInutil = new Arquero(agilidad = 25, rango = 10)

const unaGerreraPerfecta = new Gerrera(fuerza = 500, tieneEstrategia = true)
const unaGerreraEstrategia = new Gerrera(fuerza = 30, tieneEstrategia = true)
const unaGerreraDestreza = new Gerrera(fuerza = 500, tieneEstrategia = false)
const unaGerreraInutil = new Gerrera(fuerza = 30, tieneEstrategia = false)

const unBallesteroPerfecto = new Ballestero(agilidad = 500, rango = 150)
const unBallesteroEstrategia = new Ballestero(agilidad = 15, rango = 150)
const unBallesteroDestreza = new Ballestero(agilidad = 500, rango = 10)
const unBallesteroInutil = new Ballestero(agilidad = 15, rango = 10)

// Equipos.
const unEquipoPerfecto = #{unArqueroPerfecto, unaGerreraPerfecta, unBallesteroPerfecto}
const unEquipoEstrategia = #{unArqueroEstrategia, unaGerreraEstrategia, unBallesteroEstrategia}
const unEquipoDestreza = #{unArqueroDestreza, unaGerreraDestreza, unBallesteroDestreza}
const unEquipoInutil =  #{unArqueroInutil, unaGerreraInutil, unBallesteroInutil}

// --------------------------------------------------
// ðŸ”¸ Punto 1.
// --------------------------------------------------
describe "PUNTO 1 - Misiones comunes" {
	/** MISIONES INDIVIDUALES */
	test "Es posible saber si un arquero puede superar una mision individual dada (Tiene suficiente estrategia o destreza)" {
		// Si tiene estrategia y destreza suficiente, entonces puede completarla.
		assert.that(new MisionIndividual(tipoMision = comun, dificultad = 20, personaje = unArqueroPerfecto).puedeSuperar())
		
		// Si tiene estrategia suficiente pero no destreza, entonces puede completarla.
		assert.that(new MisionIndividual(tipoMision = comun, dificultad = 1000000000000, personaje = unArqueroPerfecto).puedeSuperar())
		
		// Si no tiene estrategia suficiente pero si destreza, entonces puede completarla.
		assert.that(new MisionIndividual(tipoMision = comun, dificultad = 20, personaje = unArqueroInutil).puedeSuperar())
		
		// Si no tiene estrategia y destreza suficiente, entonces no puede completarla.
		assert.notThat(new MisionIndividual(tipoMision = comun, dificultad = 1000000000000, personaje = unArqueroInutil).puedeSuperar())
	}
	
	test "Es posible saber si una guerrera puede superar una mision individual dada (Tiene suficiente estrategia o destreza)" {
		// Si tiene estrategia y destreza suficiente, entonces puede completarla.
		assert.that(new MisionIndividual(tipoMision = comun, dificultad = 20, personaje = unaGerreraPerfecta).puedeSuperar())
		
		// Si tiene estrategia suficiente pero no destreza, entonces puede completarla.
		assert.that(new MisionIndividual(tipoMision = comun, dificultad = 1000000000000, personaje = unaGerreraPerfecta).puedeSuperar())
		
		// Si no tiene estrategia suficiente pero si destreza, entonces puede completarla.
		assert.that(new MisionIndividual(tipoMision = comun, dificultad = 20, personaje = unaGerreraInutil).puedeSuperar())
		
		// Si no tiene estrategia y destreza suficiente, entonces no puede completarla.
		assert.notThat(new MisionIndividual(tipoMision = comun, dificultad = 1000000000000, personaje = unaGerreraInutil).puedeSuperar())
	}
	
	test "Es posible saber si un ballestero puede superar una mision individual dada (Tiene suficiente estrategia o destreza)" {
		// Si tiene estrategia y destreza suficiente, entonces puede completarla.
		assert.that(new MisionIndividual(tipoMision = comun, dificultad = 20, personaje = unBallesteroPerfecto).puedeSuperar())
		
		// Si tiene estrategia suficiente pero no destreza, entonces puede completarla.
		assert.that(new MisionIndividual(tipoMision = comun, dificultad = 1000000000000, personaje = unBallesteroPerfecto).puedeSuperar())
		
		// Si no tiene estrategia suficiente pero si destreza, entonces puede completarla.
		assert.that(new MisionIndividual(tipoMision = comun, dificultad = 20, personaje = unBallesteroInutil).puedeSuperar())
		
		// Si no tiene estrategia y destreza suficiente, entonces no puede completarla.
		assert.notThat(new MisionIndividual(tipoMision = comun, dificultad = 1000000000000, personaje = unBallesteroInutil).puedeSuperar())
	}
	
	/** MISIONES GRUPALES */
	test "Es posible saber si un equipo puede superar una mision grupal dada (Tiene mas de la mitad de los participantes con estrategia o cada uno tiene una destreza mayor a 400)" {
		// Si tiene estrategia y destreza suficiente, entonces pueden completarla.
		assert.that(new MisionGrupal(tipoMision = comun, equipo = unEquipoPerfecto).puedeSuperar())
		
		// Si tiene estrategia suficiente pero no destreza, entonces pueden completarla.
		assert.that(new MisionGrupal(tipoMision = comun, equipo = unEquipoEstrategia).puedeSuperar())
		
		// Si no tiene estrategia suficiente pero si destreza, entonces pueden completarla.
		assert.that(new MisionGrupal(tipoMision = comun, equipo = unEquipoDestreza).puedeSuperar())
		
		// Si no tiene estrategia y destreza suficiente, entonces no pueden completarla.
		assert.notThat(new MisionGrupal(tipoMision = comun, equipo = unEquipoInutil).puedeSuperar())
	}
}

// --------------------------------------------------
// ðŸ”¸ Punto 2.
// --------------------------------------------------
describe "PUNTO 2 - Copas" {
	/** COMUN INDIVIDUAL. */
	test "Es posible lanzar una execepcion al intentar realizar una mision individual con menos de 10 copas" {
		const unaMisionIndividual = new MisionIndividual(tipoMision = comun, dificultad = 100, personaje = unArqueroPerfecto)
		assert.throwsExceptionWithMessage("La mision no puede comenzar", {unaMisionIndividual.realizarMision()})
	}
	
	test "Es posible realizar una mision individual" {
		// Si se completa la mision, se ganan copas (2 * dificultad de la mision)
		unArqueroPerfecto.sumarCopas(10)
		new MisionIndividual(tipoMision = comun, dificultad = 10, personaje = unArqueroPerfecto).realizarMision()
		assert.equals(30, unArqueroPerfecto.cantCopas())
		
		// Si no se completa la mision, se pierden copas (2 * dificultad de la mision)
		unaGerreraInutil.sumarCopas(10)
		new MisionIndividual(tipoMision = comun, dificultad = 50, personaje = unaGerreraInutil).realizarMision()
		assert.equals(-90, unaGerreraInutil.cantCopas())
	}
	
	/** COMUN GRUPAL. */
	test "Es posible lanzar una execepcion al intentar realizar una mision grupal con menos de 60 copas totales" {
		const unaMisionGrupal = new MisionGrupal(tipoMision = comun, equipo = unEquipoPerfecto)
		assert.throwsExceptionWithMessage("La mision no puede comenzar", {unaMisionGrupal.realizarMision()})
	}
	
	test "Es posible realizar una mision grupal" {
		// Si se completa la mision, se ganan copas (50 / cant. de participantes en el equipo)
		unArqueroPerfecto.sumarCopas(20)
		unaGerreraPerfecta.sumarCopas(20)
		unBallesteroPerfecto.sumarCopas(20)
		new MisionGrupal(tipoMision = comun, equipo = unEquipoPerfecto).realizarMision()
		assert.equals(36, unArqueroPerfecto.cantCopas())
		assert.equals(36, unaGerreraPerfecta.cantCopas())
		assert.equals(36, unBallesteroPerfecto.cantCopas())
		
		// Si no se completa la mision, se pierden copas (50 / cant. de participantes en el equipo)
		unArqueroInutil.sumarCopas(20)
		unaGerreraInutil.sumarCopas(20)
		unBallesteroInutil.sumarCopas(20)
		new MisionGrupal(tipoMision = comun, equipo = unEquipoInutil).realizarMision()
		assert.equals(4, unArqueroInutil.cantCopas())
		assert.equals(4, unaGerreraInutil.cantCopas())
		assert.equals(4, unBallesteroInutil.cantCopas())
	}
}

// --------------------------------------------------
// ðŸ”¸ Punto 3.
// --------------------------------------------------
describe "PUNTO 3 - Misiones boost" {
	/** BOOST INDIVIDUAL. */
	test "Es posible lanzar una execepcion al intentar realizar una mision individual con menos de 10 copas" {
		const unaMisionIndividual = new MisionIndividual(tipoMision = new Boost(multiplicador = 3), dificultad = 100, personaje = unArqueroPerfecto)
		assert.throwsExceptionWithMessage("La mision no puede comenzar", {unaMisionIndividual.realizarMision()})
	}
	
	test "Es posible realizar una mision individual" {
		// Si se completa la mision, se ganan copas (2 * la dificultad de la mision * el multiplicador)
		unArqueroPerfecto.sumarCopas(10)
		new MisionIndividual(tipoMision = new Boost(multiplicador = 3), dificultad = 10, personaje = unArqueroPerfecto).realizarMision()
		assert.equals(70, unArqueroPerfecto.cantCopas())
		
		// Si no se completa la mision, se pierden copas (2 * la dificultad de la mision * el multiplicador)
		unaGerreraInutil.sumarCopas(10)
		new MisionIndividual(tipoMision = new Boost(multiplicador = 3), dificultad = 50, personaje = unaGerreraInutil).realizarMision()
		assert.equals(-290, unaGerreraInutil.cantCopas())
	}
	
	/** BOOST GRUPAL */
	test "Es posible lanzar una execepcion al intentar realizar una mision grupal con menos de 60 copas totales" {
		const unaMisionGrupal = new MisionGrupal(tipoMision = new Boost(multiplicador = 3), equipo = unEquipoPerfecto)
		assert.throwsExceptionWithMessage("La mision no puede comenzar", {unaMisionGrupal.realizarMision()})
	}
	
	test "Es posible realizar una mision grupal" {
		// Si se completa la mision, se ganan copas (50 / cant. de participantes en el equipo * el multiplicador)
		unArqueroPerfecto.sumarCopas(20)
		unaGerreraPerfecta.sumarCopas(20)
		unBallesteroPerfecto.sumarCopas(20)
		new MisionGrupal(tipoMision = new Boost(multiplicador = 3), equipo = unEquipoPerfecto).realizarMision()
		assert.equals(68, unArqueroPerfecto.cantCopas())
		assert.equals(68, unaGerreraPerfecta.cantCopas())
		assert.equals(68, unBallesteroPerfecto.cantCopas())
		
		// Si no se completa la mision, se pierden copas (50 / cant. de participantes en el equipo * el multiplicador)
		unArqueroInutil.sumarCopas(20)
		unaGerreraInutil.sumarCopas(20)
		unBallesteroInutil.sumarCopas(20)
		new MisionGrupal(tipoMision = new Boost(multiplicador = 3), equipo = unEquipoInutil).realizarMision()
		assert.equals(-28, unArqueroInutil.cantCopas())
		assert.equals(-28, unaGerreraInutil.cantCopas())
		assert.equals(-28, unBallesteroInutil.cantCopas())
	}
}

describe "PUNTO 3 - Misiones bonus" {
	// BONUS INDIVIDUAL.
	test "Es posible lanzar una execepcion al intentar realizar una mision individual con menos de 10 copas" {
		const unaMisionIndividual = new MisionIndividual(tipoMision = bonus, dificultad = 100, personaje = unArqueroPerfecto)
		assert.throwsExceptionWithMessage("La mision no puede comenzar", {unaMisionIndividual.realizarMision()})
	}
	
	test "Es posible realizar una mision individual" {
		// Si se completa la mision, se ganan copas (2 * la dificultad de la mision + cant. participantes en el equipo)
		unArqueroPerfecto.sumarCopas(10)
		new MisionIndividual(tipoMision = bonus, dificultad = 10, personaje = unArqueroPerfecto).realizarMision()
		assert.equals(31, unArqueroPerfecto.cantCopas())
		
		// Si no se completa la mision, se pierden copas (2 * la dificultad de la mision + cant. participantes en el equipo)
		unaGerreraInutil.sumarCopas(10)
		new MisionIndividual(tipoMision = bonus, dificultad = 50, personaje = unaGerreraInutil).realizarMision()
		assert.equals(-91, unaGerreraInutil.cantCopas())
	}
	
	// BONUS GRUPAL.
	test "Es posible lanzar una execepcion al intentar realizar una mision grupal con menos de 60 copas totales" {
		const unaMisionGrupal = new MisionGrupal(tipoMision = bonus, equipo = unEquipoPerfecto)
		assert.throwsExceptionWithMessage("La mision no puede comenzar", {unaMisionGrupal.realizarMision()})
	}
	
	test "Es posible realizar una mision grupal" {
		// Si se completa la mision, se ganan copas (50 / cant. de participantes en el equipo + cant. de participantes en el equipo)
		unArqueroPerfecto.sumarCopas(20)
		unaGerreraPerfecta.sumarCopas(20)
		unBallesteroPerfecto.sumarCopas(20)
		new MisionGrupal(tipoMision = bonus, equipo = unEquipoPerfecto).realizarMision()
		assert.equals(39, unArqueroPerfecto.cantCopas())
		assert.equals(39, unaGerreraPerfecta.cantCopas())
		assert.equals(39, unBallesteroPerfecto.cantCopas())
		
		// Si no se completa la mision, se pierden copas (50 / cant. de participantes en el equipo + cant. de participantes en el equipo)
		unArqueroInutil.sumarCopas(20)
		unaGerreraInutil.sumarCopas(20)
		unBallesteroInutil.sumarCopas(20)
		new MisionGrupal(tipoMision = bonus, equipo = unEquipoInutil).realizarMision()
		assert.equals(1, unArqueroInutil.cantCopas())
		assert.equals(1, unaGerreraInutil.cantCopas())
		assert.equals(1, unBallesteroInutil.cantCopas())
	}
}