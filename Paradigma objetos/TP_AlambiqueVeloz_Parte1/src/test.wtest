import Lugares.*
import Personajes.*
import Vehiculos.*

/*================================================================
ðŸ”¸ Lugares.
================================================================*/
describe "Paris" {
	test "Es posible obtener un llavero como recuerdo" {
		assert.equals("Llavero de la Torre Eiffel", paris.recuerdo())
	}
	
	test "Es posible saber si un vehiculo dado puede visitar el lugar (Puede desplazarse)" {
		// Si tiene el tanque lleno, el alambique puede visitarlo.
		assert.that(paris.puedeVisitar(alambiqueVeloz))
		
		// Si no tiene el tanque lleno, el alambique no puede visitarlo.
		alambiqueVeloz.consumirCombustible(40)
		assert.notThat(paris.puedeVisitar(alambiqueVeloz))
	}
}

describe "Buenos Aires" {
	test "Es posible saber si el mate incluye yerba" {
		// Si el nombre del presidente posee una cantidad de letras impares, incluye yerba.
		assert.that(buenosAires.incluirYerba())
		
		// Si el nombre del presidente no posee una cantidad de letras impares, no incluye yerba.
		buenosAires.presidente("Ares")
		assert.notThat(buenosAires.incluirYerba())
	}
	
	test "Es posible obtener un mate con yerba como recuerdo" {
		assert.equals("Mate con yerba", buenosAires.recuerdo())
	}
	
	test "Es posible obtener un mate sin yerba como recuerdo" {
		buenosAires.presidente("Ares")
		assert.equals("Mate sin yerba", buenosAires.recuerdo())
	}
	
	test "Es posible saber si un vehiculo dado puede visitar el lugar (Es rapido)" {
		// Si es rapido, el vehiculo puede visitarlo.
		assert.that(buenosAires.puedeVisitar(alambiqueVeloz))
		
		// Si no es rapido, el vehiculo no puede visitarlo.
		assert.notThat(buenosAires.puedeVisitar(rocomovil))
	}
}

describe "Bagdad" {
	test "Es posible obtener una bomba nuclear como recuerdo" {
		assert.equals("Bomba nuclear", bagdad.recuerdo())
	}
	
	test "Es posible saber si un vehiculo dado puede visitar el lugar (No hay restricciones)" {
		assert.that(bagdad.puedeVisitar(alambiqueVeloz))
	}
}

describe "Las Vegas" {
	test "Es posible obtener un recuerdo del pais homenajeado" {
		assert.equals("Llavero de la Torre Eiffel", lasVegas.recuerdo())
	}
	
	test "Es posible saber si un vehiculo dado puede visitar el lugar (Misma restriccion del pais homenajeado)" {
		// Si tiene el tanque lleno, el vehiculo puede visitarlo (Restriccion del pais homenajeado).
		assert.that(lasVegas.puedeVisitar(alambiqueVeloz))
		
		// Si no tiene el tanque lleno, el vehiculo no puede visitarlo (Resticcion del pais homenaeado).
		alambiqueVeloz.consumirCombustible(40)
		assert.notThat(lasVegas.puedeVisitar(alambiqueVeloz))
	}
}

describe "Jurassic Park" {
	test "Es posible saber si hay muchos dinosaurios (Cantidad de dinosaurios mayor a 10)" {
		// Si no hay mas de 10 dinosaurios, no hay muchos.
		assert.notThat(jurassicPark.hayMuchosDinosaurios())
		
		// Si hay mas de 10 dinosaurios, hay muchos.
		jurassicPark.agregarDinosaurios(20)
		assert.that(jurassicPark.hayMuchosDinosaurios())
	}
	
	test "Es posible obtener una foto recuerdo como recuerdo" {
		assert.equals("Foto recuerdo", jurassicPark.recuerdo())
	}
	
	test "Es posible obtener una pluma de velociraptor como recuerdo" {
		jurassicPark.agregarDinosaurios(20)
		assert.equals("Pluma de velociraptor", jurassicPark.recuerdo())
	}
	
	test "Es posible saber si un vehiculo dado puede visitar el lugar (Cantidad par de dinosaurios)" {
		// Si hay una cantidad par de dinosaurios, el vehiculo puede visitarlo.
		assert.that(jurassicPark.puedeVisitar(alambiqueVeloz))
		
		// Si no hay una cantidad par de dinosaurios, el vehiculo no puede visitarlo.
		jurassicPark.agregarDinosaurios(1)
		assert.notThat(jurassicPark.puedeVisitar(alambiqueVeloz))
	}
}


/*================================================================
 ðŸ”¸ Personajes.
================================================================*/
describe "Luke" {
	test "Es posible guardar el recuerdo de un lugar" {
		luke.guardarRecuerdoDe(paris)
		assert.equals("Llavero de la Torre Eiffel", luke.recuerdo())
	}
	
	test "Es posible ir a un lugar si puede visitarlo con un vehiculo dado" {
		// Si puede visitarlo, viaja al lugar, incrementa la cantidad de lugares visitados y guarda el recuerdo del lugar visitado.
		luke.irA(paris, alambiqueVeloz)
		assert.equals(90, alambiqueVeloz.combustible())
		assert.equals(1, luke.cantLugaresVisitados())
		assert.equals("Llavero de la Torre Eiffel", luke.recuerdo())
		
		// Si no puede visitarlo, no viaja al lugar, no incrementa la cant de lugares visitados y no guarda el recuerdo del lugar visitado.
		jurassicPark.agregarDinosaurios(1)
		luke.irA(jurassicPark, alambiqueVeloz)
		assert.equals(90, alambiqueVeloz.combustible())
		assert.equals(1, luke.cantLugaresVisitados())
		assert.equals("Llavero de la Torre Eiffel", luke.recuerdo())
	}
}


/*================================================================
ðŸ”¸ Vehiculos.
================================================================*/
describe "Alambique Veloz" {
	test "Es posible saber si posee el tanque lleno" {
		// Si tiene 100 de combustible, tiene tanque lleno.
		assert.that(alambiqueVeloz.tanqueLleno())
		
		// Si tiene menos de 100 de combustible, no tiene tanque lleno.
		alambiqueVeloz.consumirCombustible(40)
		assert.notThat(alambiqueVeloz.tanqueLleno())
	}
	
	test "Es posible saber si puede desplazarse (Tiene tanque lleno)" {
		// Si tiene tanque lleno, puede desplazarse.
		assert.that(alambiqueVeloz.puedeDesplazarse())
		
		// Si no tiene tanque lleno, no puede desplazarse.
		alambiqueVeloz.consumirCombustible(40)
		assert.notThat(alambiqueVeloz.tanqueLleno())
	}
	
	test "Es posible saber si es rapido (Siempre lo es)" {
		assert.that(alambiqueVeloz.rapido())
	}
	
	test "Es posible establecer una nueva cantidad de combustible en su tanque" {
		// No puede ser menor a cero.
		alambiqueVeloz.combustible(-10)
		assert.equals(0, alambiqueVeloz.combustible())
		
		// No puede ser mayor a la capacidad maxima de su tanque.
		alambiqueVeloz.combustible(1000)
		assert.equals(alambiqueVeloz.maximoTanque(), alambiqueVeloz.combustible())
	}
	
	test "Es posible consumir una cantidad de combustible dado" {
		alambiqueVeloz.consumirCombustible(40)
		assert.equals(60, alambiqueVeloz.combustible())
	}
	
	test "Es posible viajar (Al viajar, consume 10 de combustible)" {
		alambiqueVeloz.viajar()
		assert.equals(90, alambiqueVeloz.combustible())
	}
}

describe "Rocomobil" {
	test "Es posible saber si puede desplazarse (Siempre puede desplazarse)" {
		assert.that(rocomovil.puedeDesplazarse())
	}
	
	test "Es posible saber si es rapido (Si posee mas de 5 mejoras)" {
		// Si no tiene mas de 5 mejoras, no es rapido.
		assert.notThat(rocomovil.rapido())
		
		// Si tiene mas de 5 mejoras, es rapido.
		rocomovil.hacerMejoras(10)
		assert.that(rocomovil.rapido())
	}
	
	test "Es posible realizar una cantidad dada de mejoras" {
		rocomovil.hacerMejoras(10)
		assert.equals(10, rocomovil.mejorasHechas())
	}
	
	test "Es posible viajar (Al viajar, recibe una mejora)" {
		rocomovil.viajar()
		assert.equals(1, rocomovil.mejorasHechas())
	}
}

describe "Superheterodino" {
	test "Es posible saber si esta en buen estado (Perdio menos de 10 piezas)" {
		// Si no perdio mas de 10 piezas, esta en buen estado.
		assert.that(superheterodino.buenEstado())
		
		// Si perdio 10 o mas piezas, no puede desplazarse.
		superheterodino.perderPiezas(10)
		assert.notThat(superheterodino.puedeDesplazarse())
	}
	
	test "Es posible saber si puede desplazarse (Esta en buen estado)" {
		// Si esta en buen estado, puede desplazarse.
		assert.that(superheterodino.puedeDesplazarse())
		
		// Si no esta en buen estado, no puede desplazarse.
		superheterodino.perderPiezas(10)
		assert.notThat(superheterodino.puedeDesplazarse())
	}
	
	test "Es posible saber si es rÃ¡pido (Esta en buen estado)" {
		// Si esta en buen estado, es rapido.
		assert.that(superheterodino.rapido())
		
		// Si no esta en buen estado, no es rapido.
		superheterodino.perderPiezas(10)
		assert.notThat(superheterodino.rapido())
	}
	
	test "Es posible perder una cantidad de piezas dada" {
		superheterodino.perderPiezas(10)
		assert.equals(10, superheterodino.piezasPerdidas())
	}
	
	test "Es posible viajar (Al viajar, pierde una pieza)" {
		superheterodino.viajar()
		assert.equals(1, superheterodino.piezasPerdidas())
	}
}