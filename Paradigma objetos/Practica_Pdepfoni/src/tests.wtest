import LineasTelefonicas.*
import Consumos.*
import Packs.*

// ----------------------------------------------------------------
// ðŸ”¸ Mi Universo.
// ----------------------------------------------------------------
// CONSUMOS.
const unConsumoLlamada = new Llamada(cantSegundos = 10)
const otroConsumoLlamada = new Llamada(cantSegundos = 1000, fecha = new Date().minusYears(2))
const unConsumoInternet = new Internet(cantMB = 10)
const otroConsumoInternet = new Internet(cantMB = 1000)
const unMiniConsumoInternet = new Internet(cantMB = 0.1)

// LINEAS TELEFONICAS.
const unaLineaTelefonica = new LineaTelefonica(telefono = 1234567890, tipoLinea = comun, consumos = [unConsumoLlamada, otroConsumoLlamada, unConsumoInternet])

// VENCIMIENTOS.
const fechaVencida = new Vencimiento(fecha = new Date().minusDays(25))
const fechaNoVencida = new Vencimiento(fecha = new Date().plusDays(25))

// PACKS.
// - Consumible.
const packCredito = new Credito(cantidad = 100, tipoVencimiento = fechaNoVencida)
const packCreditoVencido = new Credito(cantidad = 100, tipoVencimiento = fechaVencida)
const packCreditoGastado = new Credito(cantidad = 0, tipoVencimiento = fechaNoVencida)
const packInternetLibre = new InternetLibre(cantidad = 100, tipoVencimiento = fechaNoVencida)
const packInternetLibreVencido = new InternetLibre(cantidad = 100, tipoVencimiento = fechaVencida)
const packInternetLibreGastado = new InternetLibre(cantidad = 0, tipoVencimiento = fechaNoVencida)
const packLlamadaLibre = new LlamadaLibre(cantidad = 100, tipoVencimiento = fechaNoVencida)
const packLlamadaLibreVencido = new LlamadaLibre(cantidad = 100, tipoVencimiento = fechaVencida)
const packLlamadaLibreGastado = new LlamadaLibre(cantidad = 0, tipoVencimiento = fechaNoVencida)
const packInternetLibrePlusPlus = new InternetLibrePlusPlus(cantidad = 100, tipoVencimiento = fechaNoVencida)
const packInternetLibrePlusPlusVencido = new InternetLibrePlusPlus(cantidad = 100, tipoVencimiento = fechaVencida)
const packInternetLibrePlusPlusGastado = new InternetLibrePlusPlus(cantidad = 0, tipoVencimiento = fechaNoVencida)

// - Ilimitado.
const packInternetIlimitadoFinde = new InternetIlimitado(diasSemanas = [saturday, sunday])
const packInternetIlimitadoMartes = new InternetIlimitado(diasSemanas = [tuesday])

// ----------------------------------------------------------------
// ðŸ”¸ Lineas Telefonicas.
// ----------------------------------------------------------------
describe "Lineas telefonicas" {
	test "Es posible obtener la cantidad de consumos realizados" {
		assert.equals(3, unaLineaTelefonica.cantConsumos())
	}
	
	test "Es posible obtener los consumos realizados entre dos fechas dadas" {
		assert.equals([unConsumoLlamada, unConsumoInternet], unaLineaTelefonica.consumosEntre(new Date().minusDays(30) , new Date()))
	}
	
	test "Es posible obtener el costo total de los consumos realizados entre dos fechas dadas" {
		assert.equals(1 + 1, unaLineaTelefonica.costoTotalEntre(new Date().minusDays(30) , new Date()))
	}
	
	test "PUNTO 2.a: Es posible obtener el costo promedio de todos los consumos realizados entre dos fechas dadas" {
		assert.equals(2 / 3, unaLineaTelefonica.costoPromedioEntre(new Date().minusDays(30) , new Date()))
	}
	
	test "PUNTO 2.b: Es posible obtener el costo total de los consumos realizados en los ultimos 30 dias" {
		assert.equals(2, unaLineaTelefonica.ultimosCostosTotales())
	}
	
	test "PUNTO 5: Si ningun pack de la linea satisface completamente el consumo dado, no es posible hacer dicho consumo" {
		// Fecha vencida.
		const vencido = new Vencimiento(fecha = new Date().minusMonths(3))
		// Fecha no vencida.
		const noVencido = new Vencimiento(fecha = new Date().plusMonths(3))
		
		// Packs vencidos.
		const pack_1 = new InternetLibre(cantidad = 10, tipoVencimiento = vencido)
		const pack_2 = new Credito(cantidad = 50, tipoVencimiento = vencido)
		const pack_3 = new InternetLibre(cantidad = 200, tipoVencimiento = vencido)
		// Packs no vencidos.
		const pack_4 = new InternetLibre(cantidad = 5, tipoVencimiento = noVencido)
		const pack_5 = new InternetLibre(cantidad = 15, tipoVencimiento = noVencido)
		
		const telefono = new LineaTelefonica(telefono = 1566666666, tipoLinea = comun, packs = [pack_1, pack_2, pack_3, pack_4, pack_5])
		
		assert.notThat(telefono.puedeRealizar(new Internet(cantMB = 20)))
	}
	
	test "PUNTO 5: Si algun pack de la linea satisface completamente el consumo dado, es posible hacer dicho consumo" {
		// Fecha vencida.
		const vencido = new Vencimiento(fecha = new Date().minusMonths(3))
		// Fecha no vencida.
		const noVencido = new Vencimiento(fecha = new Date().plusMonths(3))
		
		// Packs vencidos.
		const pack_1 = new InternetLibre(cantidad = 10, tipoVencimiento = vencido)
		const pack_2 = new Credito(cantidad = 50, tipoVencimiento = vencido)
		const pack_3 = new InternetLibre(cantidad = 200, tipoVencimiento = vencido)
		// Packs no vencidos.
		const pack_4 = new InternetLibre(cantidad = 5, tipoVencimiento = noVencido)
		const pack_5 = new InternetLibre(cantidad = 25, tipoVencimiento = noVencido)
		
		const telefono = new LineaTelefonica(telefono = 1566666666, tipoLinea = comun, packs = [pack_1, pack_2, pack_3, pack_4, pack_5])
		
		assert.that(telefono.puedeRealizar(new Internet(cantMB = 20)))
	}
	
	test "Es posible obtener el ultimo pack agregado a la linea que satisface un consumo dado" {
		const otroPackCredito = new Credito(cantidad = 1000000, tipoVencimiento = fechaNoVencida)
		const telefono = new LineaTelefonica(telefono = 1566666666, tipoLinea = comun)
		
		telefono.agregarPack(otroPackCredito)
		telefono.agregarPack(llamadasGratis)
		telefono.agregarPack(packCredito)
		assert.equals(llamadasGratis, telefono.ultimoPackQueSatisface(new Llamada(cantSegundos = 100000)))
	}
	
	test "Es posible consumir el ultimo pack agregado que satisface un consumo dado." {
		const otroPackCredito = new Credito(cantidad = 1000000, tipoVencimiento = fechaNoVencida)
		const telefono = new LineaTelefonica(telefono = 1566666666, tipoLinea = comun, packs = [otroPackCredito, llamadasGratis, packCredito])
		
		telefono.consumirPack(new Llamada(cantSegundos = 100000))
		assert.equals(100, packCredito.cantidad())
		assert.equals(1000000, otroPackCredito.cantidad())
	}
	
	test "PUNTO 6: Al intentar realizar un consumo que no se puede hacer en la linea comun, se lanza una excepcion" {
		assert.throwsExceptionWithMessage("Los packs de la lÃ­nea no cubren el consumo", {unaLineaTelefonica.realizar(otroConsumoInternet)})
	}
	
	test "PUNTO 6: Al intentar realizar un consumo que no se puede hacer en la linea black, se suma el costo del consumo al registro de deuda" {
		const telefono = new LineaTelefonica(telefono = 1566666666, tipoLinea = black)
		
		telefono.realizar(otroConsumoInternet)
		assert.equals(1000 * 0.10, telefono.deuda())
	}
	
	test "PUNTO 6: Al intentar realizar un consumo que no se puede hacer en la linea platinum, no lanza excepcion y no suma deuda" {
		const telefono = new LineaTelefonica(telefono = 1566666666, tipoLinea = platinum)
		
		telefono.realizar(otroConsumoInternet)
		assert.equals(0, telefono.deuda())
	}
	
	test "PUNTO 6: Al realizar un consumo que se puede hacer en la linea, se consume el ultimo pack agregado que satisface el consumo dado y se agrega al historial de consumos realizados" {
		const telefono = new LineaTelefonica(telefono = 1566666666, tipoLinea = comun, packs = [llamadasGratis, packLlamadaLibre, packCredito])
		
		telefono.realizar(unConsumoLlamada)
		assert.equals(100 - 1, packCredito.cantidad())
		assert.equals(100, packLlamadaLibre.cantidad())
		assert.equals([unConsumoLlamada], telefono.consumos())
	}
	
	test "PUNTO 7.a: Es posible realizar una limpieza de los packs vencidos y/o gastados" {
		const telefono = new LineaTelefonica(telefono = 1566666666, tipoLinea = comun, packs = [llamadasGratis, packCreditoVencido, packLlamadaLibre, packCredito, packLlamadaLibreVencido])
		
		telefono.limpiarPacks()
		assert.equals([llamadasGratis, packLlamadaLibre, packCredito], telefono.packs())
	}
	
	test "PUNTO 7.b: Es posible realizar un consumo de 0.1 MB (o menos) si se cuenta con el pack de Internet libre ++ ya gastado" {
		const telefono = new LineaTelefonica(telefono = 1566666666, tipoLinea = comun, packs = [packInternetLibrePlusPlusGastado])
		
		telefono.realizar(unMiniConsumoInternet)
		assert.equals(0, packInternetLibrePlusPlusGastado.cantidad())
		assert.equals([unMiniConsumoInternet], telefono.consumos())
	}
	
	test "PUNTO 7.b: Al intentar realizar un consumo mayor a 0.1 MB en una linea comun con el pack de Internet libre ++ ya gastado, se lanza una excepcion" {
		const telefono = new LineaTelefonica(telefono = 1566666666, tipoLinea = comun, packs = [packInternetLibrePlusPlusGastado])
		
		assert.throwsExceptionWithMessage("Los packs de la lÃ­nea no cubren el consumo", {telefono.realizar(unConsumoInternet)})
	}
}

// ----------------------------------------------------------------
// ðŸ”¸ Consumos.
// ----------------------------------------------------------------
describe "Consumos de llamadas" {
	test "Es posible obtener los segundos restantes despues de los primeros 30 segundos de llamada" {
		assert.equals(0, unConsumoLlamada.segundosRestantes())
		assert.equals(1000 - 30, otroConsumoLlamada.segundosRestantes())
	}
	
	test "Es posible obtener el costo de los segundos restantes" {
		assert.equals(0, unConsumoLlamada.costoRestante())
		assert.equals(970 * 0.05, otroConsumoLlamada.costoRestante())
	}
	
	test "PUNTO 1: Es posible obtener el costo del consumo de llamada (por 10 segundos)" {
		assert.equals(1 + 0 * 0.05, unConsumoLlamada.costo())
	}
	
	test "PUNTO 1: Es posible obtener el costo del consumo de llamada (por 40 segundos)" {
		assert.equals(1 + 970 * 0.05, otroConsumoLlamada.costo())
	}
	
	test "Es posible saber si la fecha de un consumo esta entre las fechas dadas" {
		assert.that(unConsumoLlamada.entreFechas(new Date().minusDays(30) , new Date()))
		assert.notThat(otroConsumoLlamada.entreFechas(new Date().minusDays(30) , new Date()))
	}
}

describe "Consumos de internet" {
	test "PUNTO 1: Es posible obtener el costo del consumo de internet (por 10 MB)" {
		assert.equals(10 * 0.10, unConsumoInternet.costo())
	}
}

// ----------------------------------------------------------------
// ðŸ”¸ Packs Disponibles.
// ----------------------------------------------------------------
describe "PACK: Credito" {
	test "Es posible saber si esta en fecha" {
		assert.that(packCredito.estaEnFecha())
		assert.notThat(packCreditoVencido.estaEnFecha())
	}
	
	test "Es posible saber si cubre el tipo de consumo llamada" {
		assert.that(packCredito.puedeCubrirElTipo(unConsumoLlamada))
	}
	
	test "Es posible saber si cubre el tipo de consumo internet" {
		assert.that(packCredito.puedeCubrirElTipo(unConsumoInternet))
	}
	
	test "Es posible obtener la cantidad a consumir, el cual es igual al costo del consumo" {
		assert.equals(1, packCredito.cantAConsumir(unConsumoLlamada))
		assert.equals(1, packCredito.cantAConsumir(unConsumoInternet))
	}
	
	test "Es posible obtener el limite posible a consumir" {
		assert.equals(100, packCredito.limiteAConsumir())
		assert.equals(0, packCreditoGastado.limiteAConsumir())
	}
	
	test "Es posible saber si puede cubrir la cantidad a consumir" {
		assert.that(packCredito.puedeCubrirLaCantidad(unConsumoLlamada))
		assert.that(packCredito.puedeCubrirLaCantidad(unConsumoInternet))
	}
	
	test "Se puede cubrir un consumo si: Se puede cubrir el tipo del consumo y se puede cubrir la cantidad del consumo" {
		// Recordar que este pack puede cubrir cualquiera de los dos tipos de consumo: Llamada e Internet.
		assert.that(packCredito.cubre(unConsumoLlamada))
		assert.that(packCredito.cubre(unConsumoInternet))
	}
	
	test "No se puede cubrir un consumo si no se puede cubrir la cantidad del consumo" {
		assert.notThat(packCreditoGastado.cubre(unConsumoLlamada))
		assert.notThat(packCreditoGastado.cubre(unConsumoInternet))
	}
	
	test "PUNTO 3: Se puede utilizar en un consumo dado si: Esta en fecha y cubre el consumo" {
		// Recordar que este pack puede cubrir cualquiera de los dos tipos de consumo: Llamada e Internet.
		assert.that(packCredito.satisface(unConsumoLlamada))
		assert.that(packCredito.satisface(unConsumoInternet))
	}
	
	test "PUNTO 3: No se puede utilizar en un consumo dado si no esta en fecha" {
		assert.notThat(packCreditoVencido.satisface(unConsumoLlamada))
		assert.notThat(packCreditoVencido.satisface(unConsumoInternet))
	}
	
	test "PUNTO 3: No se puede utilizar en un consumo dado si no cubre el consumo" {
		assert.notThat(packCreditoGastado.satisface(unConsumoLlamada))
		assert.notThat(packCreditoGastado.satisface(unConsumoInternet))
	}
	
	test "Es posible gastar el pack (Disminuir la cantidad a consumir)" {
		packCredito.gastar(unConsumoLlamada)
		assert.equals(100 - 1, packCredito.cantidad())
	}
	
	test "Es posible saber si esta totalmente gastado" {
		assert.notThat(packCredito.estaTotalmenteGastado())
		assert.that(packCreditoGastado.estaTotalmenteGastado())
	}
	
	test "Es posible saber si se puede eliminar (Esta vencido o gastado)" {
		assert.notThat(packCredito.sePuedeEliminar())
		assert.that(packCreditoVencido.sePuedeEliminar())
		assert.that(packCreditoGastado.sePuedeEliminar())
	}
}

describe "PACK: Internet Libre" {
	test "Es posible saber si esta en fecha" {
		assert.that(packInternetLibre.estaEnFecha())
		assert.notThat(packInternetLibreVencido.estaEnFecha())
	}
	
	test "Es posible saber si cubre el tipo de consumo llamada" {
		assert.notThat(packInternetLibre.puedeCubrirElTipo(unConsumoLlamada))
	}
	
	test "Es posible saber si cubre el tipo de consumo internet" {
		assert.that(packInternetLibre.puedeCubrirElTipo(unConsumoInternet))
	}
	
	test "Es posible obtener la cantidad a consumir, el cual es igual a la cantidad de MB" {
		assert.equals(0, packInternetLibre.cantAConsumir(unConsumoLlamada))
		assert.equals(10, packInternetLibre.cantAConsumir(unConsumoInternet))
	}
	
	test "Es posible obtener el limite posible a consumir" {
		assert.equals(100, packInternetLibre.limiteAConsumir())
		assert.equals(0, packInternetLibreGastado.limiteAConsumir())
	}
	
	test "Es posible saber si puede cubir la cantidad a consumir" {
		assert.that(packInternetLibre.puedeCubrirLaCantidad(unConsumoInternet))
	}
	
	test "Se puede cubrir un consumo si: Se puede cubrir el tipo del consumo y se puede cubrir la cantidad del consumo" {
		// Recordar que este pack puede cubrir solamente los consumos de Internet.
		assert.that(packInternetLibre.cubre(unConsumoInternet))	
	}
	
	test "No se puede cubrir un consumo si no se puede cubrir el tipo del consumo" {
		// Recordar que este pack no puede cubrir los consumos de Llamadas.
		assert.notThat(packInternetLibre.cubre(unConsumoLlamada))
	}
	
	test "No se puede cubrir un consumo si no se puede cubrir la cantidad del consumo" {
		assert.notThat(packInternetLibre.cubre(otroConsumoInternet))
	}
	
	test "PUNTO 3: Se puede utilizar en un consumo dado si: Esta en fecha y cubre el consumo" {
		// Recordar que este pack puede cubrir solamente los consumos de Internet.
		assert.that(packInternetLibre.satisface(unConsumoInternet))	
	}
	
	test "PUNTO 3: No se puede utilizar en un consumo dado si no esta en fecha" {
		assert.notThat(packInternetLibreVencido.satisface(unConsumoInternet))
	}
	
	test "PUNTO 3: No se puede utilizar en un consumo dado si no cubre el consumo" {
		// Recordar que este pack no puede cubrir los consumos de Llamadas.
		assert.notThat(packInternetLibre.satisface(unConsumoLlamada))
		assert.notThat(packInternetLibre.satisface(otroConsumoInternet))
	}
	
	test "Es posible gastar el pack (Disminuir la cantidad a consumir)" {
		packInternetLibre.gastar(unConsumoInternet)
		assert.equals(100 - 10, packInternetLibre.cantidad())
	}
	
	test "Es posible saber si esta totalmente gastado" {
		assert.notThat(packInternetLibre.estaTotalmenteGastado())
		assert.that(packInternetLibreGastado.estaTotalmenteGastado())
	}
	
	test "Es posible saber si se puede eliminar (Esta vencido o gastado)" {
		assert.notThat(packInternetLibre.sePuedeEliminar())
		assert.that(packInternetLibreVencido.sePuedeEliminar())
		assert.that(packInternetLibreGastado.sePuedeEliminar())
	}
}

describe "PUNTO 7.b: PACK: Internet Libre ++" {
	test "Es posible saber si esta en fecha" {
		assert.that(packInternetLibre.estaEnFecha())
		assert.notThat(packInternetLibrePlusPlusVencido.estaEnFecha())
	}
	
	test "Es posible saber si cubre el tipo de consumo llamada" {
		assert.notThat(packInternetLibrePlusPlus.puedeCubrirElTipo(unConsumoLlamada))
	}
	
	test "Es posible saber si cubre el tipo de consumo internet" {
		assert.that(packInternetLibrePlusPlus.puedeCubrirElTipo(unConsumoInternet))
	}
	
	test "Es posible obtener la cantidad a consumir, el cual es igual a la cantidad de MB" {
		assert.equals(0, packInternetLibrePlusPlus.cantAConsumir(unConsumoLlamada))
		assert.equals(10, packInternetLibrePlusPlus.cantAConsumir(unConsumoInternet))
	}
	
	test "Es posible obtener el limite posible a consumir" {
		assert.equals(100, packInternetLibrePlusPlus.limiteAConsumir())
		assert.equals(0.1, packInternetLibrePlusPlusGastado.limiteAConsumir())
	}
	
	test "Es posible saber si puede cubir la cantidad a consumir si no esta gastado" {
		assert.that(packInternetLibrePlusPlus.puedeCubrirLaCantidad(unConsumoInternet))
	}
	
	test "Es posible saber si puede cubrir la cantidad a consumir si esta gastado" {
		assert.notThat(packInternetLibrePlusPlusGastado.puedeCubrirLaCantidad(unConsumoInternet))
		assert.that(packInternetLibrePlusPlusGastado.puedeCubrirLaCantidad(unMiniConsumoInternet))
	}
	
	test "Se puede cubrir un consumo si: Se puede cubrir el tipo del consumo y se puede cubrir la cantidad del consumo" {
		// Recordar que este pack puede cubrir solamente los consumos de Internet.
		assert.that(packInternetLibrePlusPlus.cubre(unConsumoInternet))
		assert.that(packInternetLibrePlusPlusGastado.cubre(unMiniConsumoInternet))
	}
	
	test "No se puede cubrir un consumo si no se puede cubrir el tipo del consumo" {
		// Recordar que este pack no puede cubrir los consumos de Llamadas.
		assert.notThat(packInternetLibrePlusPlus.cubre(unConsumoLlamada))
	}
	
	test "No se puede cubrir un consumo si no se puede cubrir la cantidad del consumo" {
		assert.notThat(packInternetLibrePlusPlus.cubre(otroConsumoInternet))
		assert.notThat(packInternetLibrePlusPlusGastado.cubre(unConsumoInternet))
	}
	
	test "PUNTO 3: Se puede utilizar en un consumo dado si: Esta en fecha y cubre el consumo" {
		// Recordar que este pack puede cubrir solamente los consumos de Internet.
		assert.that(packInternetLibrePlusPlus.satisface(unConsumoInternet))
		assert.that(packInternetLibrePlusPlusGastado.satisface(unMiniConsumoInternet))
	}
	
	test "PUNTO 3: No se puede utilizar en un consumo dado si no esta en fecha" {
		assert.notThat(packInternetLibrePlusPlusVencido.satisface(unConsumoInternet))
		assert.notThat(packInternetLibrePlusPlusVencido.satisface(unMiniConsumoInternet))
	}
	
	test "PUNTO 3: No se puede utilizar en un consumo dado si no cubre el consumo" {
		// Recordar que este pack no puede cubrir los consumos de Llamadas.
		assert.notThat(packInternetLibrePlusPlus.satisface(unConsumoLlamada))
		assert.notThat(packInternetLibrePlusPlus.satisface(otroConsumoInternet))
		assert.notThat(packInternetLibrePlusPlusGastado.satisface(unConsumoInternet))
	}
	
	test "Es posible gastar el pack (Disminuir la cantidad a consumir)" {
		packInternetLibrePlusPlus.gastar(unConsumoInternet)
		packInternetLibrePlusPlusGastado.gastar(unMiniConsumoInternet)
		assert.equals(100 - 10, packInternetLibrePlusPlus.cantidad())
		assert.equals(0, packInternetLibrePlusPlusGastado.cantidad())
	}
	
	test "Es posible saber si esta totalmente gastado" {
		assert.notThat(packInternetLibrePlusPlus.estaTotalmenteGastado())
		assert.that(packInternetLibrePlusPlusGastado.estaTotalmenteGastado())
	}
	
	test "Es posible saber si se puede eliminar (Esta vencido o gastado)" {
		assert.notThat(packInternetLibrePlusPlus.sePuedeEliminar())
		assert.that(packInternetLibrePlusPlusVencido.sePuedeEliminar())
		assert.that(packInternetLibrePlusPlusGastado.sePuedeEliminar())
	}
}

describe "PUNTO 4: PACK: Llamadas Libre" {
	test "Es posible saber si esta en fecha" {
		assert.that(packLlamadaLibre.estaEnFecha())
		assert.notThat(packLlamadaLibreVencido.estaEnFecha())
	}
	
	test "Es posible saber si cubre el tipo de consumo llamada" {
		assert.that(packLlamadaLibre.puedeCubrirElTipo(unConsumoLlamada))
	}
	
	test "Es posible saber si cubre el tipo de consumo internet" {
		assert.notThat(packLlamadaLibre.puedeCubrirElTipo(unConsumoInternet))
	}
	
	test "Es posible obtener la cantidad a consumir, el cual es igual a la cantidad de segundos de llamada" {
		assert.equals(10, packLlamadaLibre.cantAConsumir(unConsumoLlamada))
		assert.equals(0, packLlamadaLibre.cantAConsumir(unConsumoInternet))
	}
	
	test "Es posible obtener el limite posible a consumir" {
		assert.equals(100, packLlamadaLibre.limiteAConsumir())
		assert.equals(0, packLlamadaLibreGastado.limiteAConsumir())
	}
	
	test "Es posible saber si puede cubir la cantidad a consumir" {
		assert.that(packLlamadaLibre.puedeCubrirLaCantidad(unConsumoLlamada))
	}
	
	test "Se puede cubrir un consumo si: Se puede cubrir el tipo del consumo y se puede cubrir la cantidad del consumo" {
		// Recordar que este pack puede cubrir solamente los consumos de Llamada.
		assert.that(packLlamadaLibre.cubre(unConsumoLlamada))	
	}
	
	test "No se puede cubrir un consumo si no se puede cubrir el tipo del consumo" {
		// Recordar que este pack no puede cubrir los consumos de Internet.
		assert.notThat(packLlamadaLibre.cubre(unConsumoInternet))
	}
	
	test "No se puede cubrir un consumo si no se puede cubrir la cantidad del consumo" {
		assert.notThat(packLlamadaLibre.cubre(otroConsumoLlamada))
	}
	
	test "PUNTO 3: Se puede utilizar en un consumo dado si: Esta en fecha y cubre el consumo" {
		// Recordar que este pack puede cubrir solamente los consumos de Llamada.
		assert.that(packLlamadaLibre.satisface(unConsumoLlamada))	
	}
	
	test "PUNTO 3: No se puede utilizar en un consumo dado si no esta en fecha" {
		assert.notThat(packLlamadaLibreVencido.satisface(unConsumoLlamada))
	}
	
	test "PUNTO 3: No se puede utilizar en un consumo dado si no cubre el consumo" {
		// Recordar que este pack no puede cubrir los consumos de Internet.
		assert.notThat(packLlamadaLibre.satisface(unConsumoInternet))
		assert.notThat(packLlamadaLibre.satisface(otroConsumoLlamada))
	}
	
	test "Es posible gastar el pack (Disminuir la cantidad a consumir)" {
		packLlamadaLibre.gastar(unConsumoLlamada)
		assert.equals(100 - 10, packLlamadaLibre.cantidad())
	}
	
	test "Es posible saber si esta totalmente gastado" {
		assert.notThat(packLlamadaLibre.estaTotalmenteGastado())
		assert.that(packLlamadaLibreGastado.estaTotalmenteGastado())
	}
	
	test "Es posible saber si se puede eliminar (Esta vencido o gastado)" {
		assert.notThat(packLlamadaLibre.sePuedeEliminar())
		assert.that(packLlamadaLibreVencido.sePuedeEliminar())
		assert.that(packLlamadaLibreGastado.sePuedeEliminar())
	}
}

describe "PACK: Llamadas Gratis" {
	test "Es posible saber si esta en fecha" {
		assert.that(llamadasGratis.estaEnFecha())
	}
	
	test "Es posible saber si cubre el tipo de consumo llamada" {
		assert.that(llamadasGratis.puedeCubrirElTipo(unConsumoLlamada))
	}
	
	test "Es posible saber si cubre el tipo de consumo internet" {
		assert.notThat(llamadasGratis.puedeCubrirElTipo(unConsumoInternet))
	}
	
	test "Es posible usarlo cualquier dia de la semana" {
		assert.that(llamadasGratis.esDiaSemanaValido(new Date(day = 24, month = 12, year = 2023)))
		assert.that(llamadasGratis.esDiaSemanaValido(new Date(day = 25, month = 12, year = 2023)))
		assert.that(llamadasGratis.esDiaSemanaValido(new Date(day = 26, month = 12, year = 2023)))
		assert.that(llamadasGratis.esDiaSemanaValido(new Date(day = 27, month = 12, year = 2023)))
		assert.that(llamadasGratis.esDiaSemanaValido(new Date(day = 28, month = 12, year = 2023)))
		assert.that(llamadasGratis.esDiaSemanaValido(new Date(day = 29, month = 12, year = 2023)))
		assert.that(llamadasGratis.esDiaSemanaValido(new Date(day = 30, month = 12, year = 2023)))
	}
	
	test "Se puede cubrir un consumo si se puede cubrir el tipo del consumo" {
		// Recordar que este pack puede cubrir solamente los consumos de Llamada.
		assert.that(llamadasGratis.cubre(unConsumoLlamada))
		
	}
	
	test "No se puede cubrir un consumo si no se puede cubrir el tipo del consumo" {
		// Recordar que este pack no puede cubrir los consumos de Internet.
		assert.notThat(llamadasGratis.cubre(unConsumoInternet))
	}
	
	test "PUNTO 3: Se puede utilizar en un consumo dado si: Esta en fecha y cubre el consumo" {
		// Recordar que este pack puede cubrir solamente los consumos de Llamada.
		assert.that(llamadasGratis.satisface(unConsumoLlamada))
	}
	
	test "PUNTO 3: No se puede utilizar en un consumo dado si no cubre el consumo" {
		// Recordar que este pack no puede cubrir los consumos de Internet.
		assert.notThat(llamadasGratis.satisface(unConsumoInternet))
	}
}

describe "PACK: Internet Ilimitado los Fin de Semana" {
	test "Es posible saber si esta en fecha" {
		assert.that(packInternetIlimitadoFinde.estaEnFecha())
	}
	
	test "Es posible saber si cubre el tipo de consumo llamada" {
		assert.notThat(packInternetIlimitadoFinde.puedeCubrirElTipo(unConsumoLlamada))
	}
	
	test "Es posible saber si cubre el tipo de consumo internet" {
		assert.that(packInternetIlimitadoFinde.puedeCubrirElTipo(unConsumoInternet))
	}
	
	test "Es posible usarlo solamente los fin de semana" {
		assert.notThat(packInternetIlimitadoFinde.esDiaSemanaValido(monday))
		assert.notThat(packInternetIlimitadoFinde.esDiaSemanaValido(tuesday))
		assert.notThat(packInternetIlimitadoFinde.esDiaSemanaValido(wednesday))
		assert.notThat(packInternetIlimitadoFinde.esDiaSemanaValido(thursday))
		assert.notThat(packInternetIlimitadoFinde.esDiaSemanaValido(friday))
		assert.that(packInternetIlimitadoFinde.esDiaSemanaValido(saturday))
		assert.that(packInternetIlimitadoFinde.esDiaSemanaValido(sunday))
	}
}

describe "PUNTO 4: PACK: Internet Ilimitado los Martes" {
	test "Es posible saber si esta en fecha" {
		assert.that(packInternetIlimitadoMartes.estaEnFecha())
	}
	
	test "Es posible saber si cubre el tipo de consumo llamada" {
		assert.notThat(packInternetIlimitadoMartes.puedeCubrirElTipo(unConsumoLlamada))
	}
	
	test "Es posible saber si cubre el tipo de consumo internet" {
		assert.that(packInternetIlimitadoMartes.puedeCubrirElTipo(unConsumoInternet))
	}
	
	test "Es posible usarlo solamente los fin de semana" {
		assert.notThat(packInternetIlimitadoMartes.esDiaSemanaValido(monday))
		assert.that(packInternetIlimitadoMartes.esDiaSemanaValido(tuesday))
		assert.notThat(packInternetIlimitadoMartes.esDiaSemanaValido(wednesday))
		assert.notThat(packInternetIlimitadoMartes.esDiaSemanaValido(thursday))
		assert.notThat(packInternetIlimitadoMartes.esDiaSemanaValido(friday))
		assert.notThat(packInternetIlimitadoMartes.esDiaSemanaValido(saturday))
		assert.notThat(packInternetIlimitadoMartes.esDiaSemanaValido(sunday))
	}
}

// ----------------------------------------------------------------
// ðŸ”¸ Vigencia de los Packs.
// ----------------------------------------------------------------
describe "Vencimiento" {
	test "Es posible saber si un vencimiento esta en fecha" {
		assert.that(fechaNoVencida.estaEnFecha())
		assert.notThat(fechaVencida.estaEnFecha())
	}
}