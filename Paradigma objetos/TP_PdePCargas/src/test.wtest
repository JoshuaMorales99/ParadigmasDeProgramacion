import Camiones.*
import Empresas.*
import PuestosControl.*

/* =========================================================
ðŸ”¸ CAMIONES.
===========================================================*/
describe "Verdurin" {
	test "Es posible obtener el peso total de la carga (50kg * cantCajones)" {
		assert.equals(50 * 10, verdurin.pesoCarga())
	}
	
	test "Es posible obtener la velocidad maxima (80km/h - 1km/h por cada 500kg de carga)" {
		assert.equals(80 - (10 * 50) / 500, verdurin.velocidadMaxima())
	}
	
	test "Es posible sumarle kilometrajes" {
		verdurin.sumarKilometros(100)
		assert.equals(700000 + 100, verdurin.kilometraje())
	}
	
	test "Es posible recorrer cierta cantidad de kilometros a cierta velocidad" {
		verdurin.recorrer(100, 20)
		assert.equals(700000 + 100, verdurin.kilometraje())
	}
}

describe "Scanion5000" {
	test "Es posible obtener el peso de la carga (densidad * capacidadMaxima)" {
		assert.equals(5000 * 10, scanion5000.pesoCarga())
	}
}

describe "Cerialitas" {
	test "Es posible saber si esta en buen estado" {
		assert.that(cerealitas.estaEnBuenEstado())
		cerealitas.nivelDeterioro(10)
		assert.notThat(cerealitas.estaEnBuenEstado())
	}
	
	test "Es posible obtener la velocidad maxima por mal estado del camion" {
		cerealitas.nivelDeterioro(10)
		assert.equals(60 - 10, cerealitas.velocidadPorMalEstado())
	}
	
	test "La velocidad maxima por mal estado del camion no puede ser negativo" {
		cerealitas.nivelDeterioro(10000)
		assert.equals(0, cerealitas.velocidadPorMalEstado())
	}
	
	test "Es posible obtener la velocidad maxima del camion si se encuentra en buen estado" {
		assert.equals(40, cerealitas.velocidadMaxima())
	}
	
	test "Es posible obtener la velocidad maxima del camion si no se encuentra en buen estado" {
		cerealitas.nivelDeterioro(30)
		assert.equals(60 - 30, cerealitas.velocidadMaxima())
	}
	
	test "La velocidad maxima nunca puede ser negativa si se encuentra en el peor estado" {
		cerealitas.nivelDeterioro(10000)
		assert.equals(0, cerealitas.velocidadMaxima())
	}
	
	test "Es posible obtener la velocidad excedida dada la velocidad maxima permitida" {
		cerealitas.nivelDeterioro(10)
		assert.equals(50 - 45, cerealitas.velocidadExcedida(45))
	}
	
	test "El valor de la velocidad excedida no puede ser negativa" {
		assert.equals(0, cerealitas.velocidadExcedida(45))
	}
	
	test "Al recorrer una cierta cantidad de km con una velocidad maxima que no excede los 45 km/h, no se deteriora" {
		cerealitas.recorrer(100, 75)
		assert.equals(0, cerealitas.nivelDeterioro())
	}
	
	test "Al recorrer una cierta cantidad de km con una velocidad maxima que excede los 45 km/h, se deteriora" {
		cerealitas.nivelDeterioro(10)
		cerealitas.recorrer(100, 75)
		assert.equals(10 + 50 - 45, cerealitas.nivelDeterioro())
	}
}

/* =========================================================
ðŸ”¸ EMPRESA PDEP CARGAS.
===========================================================*/
describe "PdePCargas" {
	test "Es posible sumar deudas al total de deudas pendiente" {
		pdepCargas.generarDeuda(100)
		assert.equals(100, pdepCargas.deudaTotal())
	}
}

/* =========================================================
ðŸ”¸ PUESTOS DE CONTROL.
===========================================================*/
describe "Rutatlantica" {
	test "Es posible obtener el importe adicional por dejar pasar a un camion dado" {
		assert.equals(100 * (50000 / 1000), rutatlantica.importeAdicional(scanion5000))
	}
	
	test "Es posible obtener el importe por dejar pasar a un camion dado" {
		assert.equals(7000 + 5000, rutatlantica.generarImporte(scanion5000))
	}
	
	test "Es posible cobrarle a la empresa dada los cargos por pasar" {
		rutatlantica.cobrarCargosA(pdepCargas, 12000)
		assert.equals(12000, pdepCargas.deudaTotal())
	}
	
	test "Cuando pasa un camion, se le cobra a la empresa el importe"{
		rutatlantica.dejarPasar(scanion5000)
		assert.equals(12000, pdepCargas.deudaTotal()) 
	}
	
	test "Cuando pasa un camion, recorre 400 km a 75 km/h" {
		rutatlantica.dejarPasar(verdurin)
		assert.equals(700400, verdurin.kilometraje())
	}
}

