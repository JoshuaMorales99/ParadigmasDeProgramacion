import Parrilla.*
import Comidas.*
import Comensales.*

// -------------------------------------------------------------
// ðŸ”¸ Mi universo.
// -------------------------------------------------------------
// COMIDAS DISPONIBLES.
const unaProvoleta = new Provoleta(peso = 300, tieneEmpanado = true)
const otraProvoleta = new Provoleta(peso = 10, tieneEmpanado = false)

const unaHamburguesaCarne = new HamburguesaCarne(pesoCarne = 300, pan = industrial)
const otraHamburguesaCarne = new HamburguesaCarne(pesoCarne = 10, pan = deMaiz)

const unaHamburguesaDoble = new HamburguesaDoble(pesoCarne = 300, pan = industrial)
const otraHamburguesaDoble = new HamburguesaDoble(pesoCarne = 10, pan = deMaiz)

const unCorteCarne = new CorteCarne(peso = 300, puntoCoccion = aPunto)
const otroCorteCarne = new CorteCarne(peso = 10, puntoCoccion = jugoso)

const parrillada = new Parrillada()

// COMENSALES.
const unComensalCeliaco = new Comensal(tipoComensal = celiaco, dinero = 100000)
const otroComensalCeliaco = new Comensal(tipoComensal = celiaco, dinero = 1000)

const unComensalPaladarFino = new Comensal(tipoComensal = paladarFino, dinero = 100000)
const otroComensalPaladarFino = new Comensal(tipoComensal = paladarFino, dinero = 1000)

const unComensalTodoTerreno = new Comensal(tipoComensal = todoTerreno, dinero = 100000)
const otroComensalTodoTerreno = new Comensal(tipoComensal = todoTerreno, dinero = 1000)

// UN MENU.
const unMenu = #{unaProvoleta, otraProvoleta, unaHamburguesaCarne, otraHamburguesaCarne, unaHamburguesaDoble, otraHamburguesaDoble, unCorteCarne, otroCorteCarne}
const unMenuCeliaco = #{otraProvoleta, otraHamburguesaCarne, otraHamburguesaDoble, unCorteCarne, otroCorteCarne}
const unMenuNoCeliaco = #{unaProvoleta, unaHamburguesaCarne, unaHamburguesaDoble}

// -------------------------------------------------------------
// ðŸ”¸ La Parrilla del nuevo Miguelito.
// -------------------------------------------------------------
describe "La parrilla del nuevo Miguelito" {
	test "Es posible obtener los platillos validos (que puede comprar) para un comensal dado" {
		parrillaMiguelito.agregarAMenu(unMenu)
		assert.equals(unMenuCeliaco, parrillaMiguelito.platillosValidosPara(unComensalCeliaco))
	}
	
	test "Si no hay platillos validos (que no puede comprar) para un comensal dado, se devuelve un set vacio" {
		parrillaMiguelito.agregarAMenu(unMenuNoCeliaco)
		assert.equals(#{}, parrillaMiguelito.platillosValidosPara(unComensalCeliaco))
	}
	
	test "Cuando no hay platillos validos (que no puede comprar) para un comensal dado, se puede lanzar una excepcion" {
		parrillaMiguelito.agregarAMenu(unMenuNoCeliaco)
		assert.throwsExceptionWithMessage("No existe plato valido en el menu que pueda comprar el comensal dado", {parrillaMiguelito.verificarMenu(unComensalCeliaco)})
	}
	
	test "Es posible agregar una dada cantidad de fondos a sus ingresos" {
		parrillaMiguelito.agregarFondos(10000)
		assert.equals(10000, parrillaMiguelito.ingresos())
	}
	
	test "Es posible cobrarle el platillo escogido al comensal dado" {
		parrillaMiguelito.agregarAMenu(unMenu)
		parrillaMiguelito.cobrar(unComensalCeliaco)
		// Del menu, elije 'unCorteCarne' por tener la valoracion mas alta. Por lo tanto, le sale 31200.
		assert.equals(68800, unComensalCeliaco.dinero())
		assert.equals(31200, parrillaMiguelito.ingresos())
	}
	
	test "Es posible ofrecerle el menu a un comensal y que este pueda comprarlo" {
		parrillaMiguelito.agregarAMenu(unMenu)
		parrillaMiguelito.ofrecerMenuA(unComensalCeliaco)
		// Del menu, elije 'unCorteCarne' por tener la valoracion mas alta. Por lo tanto, le sale 31200.
		assert.equals(68800, unComensalCeliaco.dinero())
		assert.equals(31200, parrillaMiguelito.ingresos())
		assert.equals(#{unComensalCeliaco}, parrillaMiguelito.historialComensales())
	}
	
	test "Cuando se le ofrece un menu a un comensal y este no puede comprar ningun platillo, se lanza una excepcion" {
		parrillaMiguelito.agregarAMenu(unMenuNoCeliaco)
		assert.throwsExceptionWithMessage("No existe plato valido en el menu que pueda comprar el comensal dado", {parrillaMiguelito.ofrecerMenuA(unComensalCeliaco)})
	}
	
	test "Es posible saber la cantidad de comensales registrados en el historial" {
		parrillaMiguelito.agregarAlHistorial(unComensalCeliaco)
		parrillaMiguelito.agregarAlHistorial(unComensalPaladarFino)
		parrillaMiguelito.agregarAlHistorial(unComensalTodoTerreno)
		assert.equals(3, parrillaMiguelito.cantComensalesRegistrados())
	}
	
	test "Es posible saber la cantidad total de dinero a entregar a cada comensal registrado en el historial" {
		parrillaMiguelito.agregarAlHistorial(unComensalCeliaco)
		parrillaMiguelito.agregarAlHistorial(unComensalPaladarFino)
		parrillaMiguelito.agregarAlHistorial(unComensalTodoTerreno)
		assert.equals(300, parrillaMiguelito.cantTotalPromocion(100))
	}
	
	test "Cuando no hay suficientes ingresos para realizar la promocion, se puede lanzar una excepcion" {
		assert.throwsExceptionWithMessage("No hay suficientes ingresos para realizar la promocion", {parrillaMiguelito.verificarIngresos(300)})
	}
	
	test "Es posible quitar una dada cantidad de fondos a sus ingresos" {
		parrillaMiguelito.agregarFondos(10000)
		parrillaMiguelito.quitarFondos(1000)
		assert.equals(9000, parrillaMiguelito.ingresos())
	}
	
	test "Es posible entregar la promocion a cada comensal registrado en el historial" {
		parrillaMiguelito.agregarAlHistorial(unComensalCeliaco)
		parrillaMiguelito.agregarAlHistorial(unComensalPaladarFino)
		parrillaMiguelito.agregarAlHistorial(unComensalTodoTerreno)
		parrillaMiguelito.entregarPromocion(100)
		assert.equals(100100, unComensalCeliaco.dinero())
		assert.equals(100100, unComensalPaladarFino.dinero())
		assert.equals(100100, unComensalTodoTerreno.dinero())
	}
	
	test "Es posible realizar una promocion si hay suficientes ingresos" {
		parrillaMiguelito.agregarAlHistorial(unComensalCeliaco)
		parrillaMiguelito.agregarAlHistorial(unComensalPaladarFino)
		parrillaMiguelito.agregarAlHistorial(unComensalTodoTerreno)
		parrillaMiguelito.agregarFondos(10000)
		parrillaMiguelito.hacerPromocion(1000)
		assert.equals(7000, parrillaMiguelito.ingresos())
		assert.equals(101000, unComensalCeliaco.dinero())
		assert.equals(101000, unComensalPaladarFino.dinero())
		assert.equals(101000, unComensalTodoTerreno.dinero())
	}
	
	test "Cuando se quiere realizar una promocion, pero no hay suficientes ingresos para realizarla, se lanza una excepcion"{
		parrillaMiguelito.agregarAlHistorial(unComensalCeliaco)
		parrillaMiguelito.agregarAlHistorial(unComensalPaladarFino)
		parrillaMiguelito.agregarAlHistorial(unComensalTodoTerreno)
		assert.throwsExceptionWithMessage("No hay suficientes ingresos para realizar la promocion", {parrillaMiguelito.hacerPromocion(1000)})
	}
}

// -------------------------------------------------------------
// ðŸ”¸ Comidas disponibles en La Parrilla del nuevo Miguelito.
// -------------------------------------------------------------
describe "PROVOLETA" {
	test "Es apto para celiacos si no esta empanado" {
		assert.that(otraProvoleta.aptoCeliacos())
	}
	
	test "No es apto para celiacos si esta empanado" {
		assert.notThat(unaProvoleta.aptoCeliacos())
	}
	
	test "Es posible obtener su valoracion que es igual a 120 si es especial" {
		assert.equals(120, unaProvoleta.valoracion())
	}
	
	test "Es posible obtener su valoracion que es igual a 80 si no es especial" {
		assert.equals(80, otraProvoleta.valoracion())
	}
	
	test "Es especial si pesa mas de 250 gramos" {
		assert.that(unaProvoleta.esEspecial())
	}
	
	test "No es especial si su peso es menor a 250 gramos" {
		assert.notThat(otraProvoleta.esEspecial())
	}
	
	test "El monto adicional por ser apto para celiacos es de 1200" {
		assert.equals(1200, otraProvoleta.adicional())
	}
	
	test "El monto adicional por no ser apto para celiacos es de 0" {
		assert.equals(0, unaProvoleta.adicional())
	}
	
	test "Es posible obtener su precio total que es igual a 300 * su valoracion + adicional" {
		assert.equals(36000, unaProvoleta.precio())
	}
}

describe "HAMBURGUESA DE CARNE" {
	test "Es apta para celiacos si el pan utilizado lo es" {
		assert.that(otraHamburguesaCarne.aptoCeliacos())
	}
	
	test "No es apta para celiacos si el pan utilizado no lo es" {
		assert.notThat(unaHamburguesaCarne.aptoCeliacos())
	}
	
	test "Es posible obtener su peso que es igual a peso del medallon de carne + peso del pan utilizado en su elaboracion" {
		assert.equals(360, unaHamburguesaCarne.peso())
	}
	
	test "Es posible obtener su valoracion que es igual a su peso / 10" {
		assert.equals(36, unaHamburguesaCarne.valoracion())
	}
	
	test "Es especial si pesa mas de 250 gramos" {
		assert.that(unaHamburguesaCarne.esEspecial())
	}
	
	test "No es especial si su peso es menor a 250 gramos" {
		assert.notThat(otraHamburguesaCarne.esEspecial())
	}
	
	test "El monto adicional por ser apto para celiacos es de 1200" {
		assert.equals(1200, otraHamburguesaCarne.adicional())
	}
	
	test "El monto adicional por no ser apto para celiacos es de 0" {
		assert.equals(0, unaHamburguesaCarne.adicional())
	}
	
	test "Es posible obtener su precio total que es igual a 300 * su valoracion + adicional" {
		assert.equals(10800, unaHamburguesaCarne.precio())
	}

}

describe "HAMBURGUESA DOBLE" {
	test "Es apta para celiacos si el pan utilizado lo es" {
		assert.that(otraHamburguesaDoble.aptoCeliacos())
	}
	
	test "No es apta para celiacos si el pan utilizado no lo es" {
		assert.notThat(unaHamburguesaDoble.aptoCeliacos())
	}
	
	test "Es posible obtener su peso que es igual a 2 * peso del medallon de carne + peso del pan utilizado en su elaboracion" {
		assert.equals(660, unaHamburguesaDoble.peso())
	}
	
	test "Es posible obtener su valoracion que es igual a su peso / 10" {
		assert.equals(66, unaHamburguesaDoble.valoracion())
	}
	
	test "Es especial si pesa mas de 500 gramos" {
		assert.that(unaHamburguesaDoble.esEspecial())
	}
	
	test "No es especial si su peso es menor a 500 gramos" {
		assert.notThat(otraHamburguesaDoble.esEspecial())
	}
	
	test "El monto adicional por ser apto para celiacos es de 1200" {
		assert.equals(1200, otraHamburguesaDoble.adicional())
	}
	
	test "El monto adicional por no ser apto para celiacos es de 0" {
		assert.equals(0, unaHamburguesaDoble.adicional())
	}
	
	test "Es posible obtener su precio total que es igual a 300 * su valoracion + adicional" {
		assert.equals(19800, unaHamburguesaDoble.precio())
	}
}

describe "CORTE DE CARNE" {
	test "Siempre es apto para celiacos" {
		assert.that(unCorteCarne.aptoCeliacos())
	}
	
	test "Es posible obtener su valoracion que es igual a 100" {
		assert.equals(100, unCorteCarne.valoracion())
	}
	
	test "Es especial si pesa mas de 250 gramos y su punto de coccion es a punto" {
		assert.that(unCorteCarne.esEspecial())
	}
	
	test "No es especial si su peso es menor a 250 gramos, a pesar de que su punto de coccion sea a punto" {
		const corteCarne = new CorteCarne(peso = 10, puntoCoccion = aPunto)
		assert.notThat(corteCarne.esEspecial())
	}
	
	test "No es especial si su punto de coccion no es a punto, a pesar de que pese mas de 250 gramos" {
		const corteCarne = new CorteCarne(peso = 300, puntoCoccion = jugoso)
		assert.notThat(corteCarne.esEspecial())
	}
	
	test "No es especial si su peso es menor a 250 gramos y su punto de coccion no es a punto" {
		assert.notThat(otroCorteCarne.esEspecial())
	}
	
	test "El monto adicional por ser siempre apto para celiacos es de 1200" {
		assert.equals(1200, unCorteCarne.adicional())
	}
	
	test "Es posible obtener su precio total que es igual a 300 * su valoracion + adicional" {
		assert.equals(31200, unCorteCarne.precio())
	}
}

// PUNTO 4a - Tests de la Parrillada.
describe "PARRILLADA" {
	test "Es apto para celiacos si todas las comidas que la componen lo son" {
		parrillada.agregarAParrillada([otraProvoleta, otraHamburguesaCarne, otraHamburguesaDoble, unCorteCarne])
		assert.that(true)
	}
	
	test "No es apto para celiacos si hay alguna comida que lo compone que no lo sea" {
		parrillada.agregarAParrillada([otraProvoleta, otraHamburguesaCarne, unaHamburguesaDoble, otroCorteCarne])
		assert.notThat(false)
	}
	
	test "Es posible obtener su valoracion que es igual a la mayor valoracion de entre todas las comidas que la componen" {
		parrillada.agregarAParrillada([unaProvoleta, unaHamburguesaCarne, unaHamburguesaDoble, unCorteCarne])
		// Es igual a 120 por unaProvoleta, pues es la que tiene mayor valoracion.
		assert.equals(120, parrillada.valoracion())
	}
	
	test "Es posible saber la cantidad de comidas que la componen" {
		parrillada.agregarAParrillada([unaProvoleta, unaHamburguesaCarne, unaHamburguesaDoble, unCorteCarne])
		assert.equals(4, parrillada.cantComidas())
	}
	
	test "Es especial si pesa mas de 250 gramos y tiene al menos 3 comidas que la componen" {
		parrillada.agregarAParrillada([unaProvoleta, unaHamburguesaCarne, unaHamburguesaDoble, unCorteCarne])
		assert.that(parrillada.esEspecial())
	}
	
	test "No es especial si su peso es menor a 250 gramos, a pesar de que tenga al menos 3 comidas que la componen" {
		parrillada.agregarAParrillada([otraProvoleta, otraHamburguesaCarne, otraHamburguesaDoble, otroCorteCarne])
		assert.notThat(parrillada.esEspecial())
	}
	
	test "No es especial si no esta compuesta al menos por 3 comidas, a pesar de que pese mas de 250 gramos" {
		parrillada.agregarAParrillada([unaProvoleta, unaHamburguesaDoble])
		assert.notThat(parrillada.esEspecial())
	}
	
	test "No es especial si su peso es menor a 250 gramos y no esta compuesta al menos por 3 comidas" {
		parrillada.agregarAParrillada([otraProvoleta, otroCorteCarne])
		assert.notThat(parrillada.esEspecial())
	}
	
	test "El monto adicional por ser apto para celiacos es de 1200" {
		parrillada.agregarAParrillada([otraProvoleta, otraHamburguesaCarne, otraHamburguesaDoble, unCorteCarne])
		assert.equals(1200, parrillada.adicional())
	}
	
	test "El monto adicional por no ser apto para celiacos es de 0" {
		parrillada.agregarAParrillada([otraProvoleta, otraHamburguesaCarne, unaHamburguesaDoble, otroCorteCarne])
		assert.equals(0, parrillada.adicional())
	}
	
	test "Es posible obtener su precio total que es igual a 300 * su valoracion + adicional" {
		parrillada.agregarAParrillada([unaProvoleta, unaHamburguesaCarne, unaHamburguesaDoble, unCorteCarne])
		assert.equals(36000, parrillada.precio())
	}
}

// -------------------------------------------------------------
// ðŸ”¸ Comensales.
// -------------------------------------------------------------
describe "Comensal celiaco" {
	test "Le agreda la comida si es apta para celiacos" {
		assert.that(unComensalCeliaco.leAgrada(otraProvoleta))
	}
	
	test "No le agrada la comida si no es apta para celiacos" {
		assert.notThat(unComensalCeliaco.leAgrada(unaProvoleta))
	}
	
	test "Puede pagar una comida si le alcanza el dinero" {
		assert.that(unComensalCeliaco.puedePagar(unaProvoleta))
	}
	
	test "No puede pagar una comida si no le alcanza el dinero" {
		assert.notThat(otroComensalCeliaco.puedePagar(unaProvoleta))
	}
	
	test "Puede comprar una comida si le agrada y puede pagarla" {
		assert.that(unComensalCeliaco.puedeComprar(otraProvoleta))
	}
	
	test "No puede comprar una comida si no le agrada, a pesar de poder pagarla" {
		assert.notThat(unComensalCeliaco.puedeComprar(unaProvoleta))
	}
	
	test "No puede comprar una comida si no puede pagarla, a pesar de que le agrade" {
		assert.notThat(otroComensalCeliaco.puedeComprar(otraProvoleta))
	}
	
	test "No puede comprar una comida si no le agrada y no puede pagarla" {
		assert.notThat(otroComensalCeliaco.puedeComprar(unaProvoleta))
	}
	
	test "Elige el platillo del menu con mayor valoracion" {
		assert.equals(unaProvoleta, unComensalCeliaco.elegirPlatillo([unaProvoleta, unaHamburguesaCarne, unaHamburguesaDoble, unCorteCarne]))
	}
	
	test "Es posible descontar una dada cantidad de dinero" {
		unComensalCeliaco.pagar(1000)
		assert.equals(99000, unComensalCeliaco.dinero())
	}
	
	test "Es posible recibir la promocion de la parrilla" {
		unComensalCeliaco.recibirPromocion(1000)
		assert.equals(101000, unComensalCeliaco.dinero())
	}
}

describe "Comensal paladar fino" {
	test "Le agrada la comida si es especial y si su valoracion es mayor a 100" {
		assert.that(unComensalPaladarFino.leAgrada(unaProvoleta))
	}
	
	test "No le agrada la comida si no es especial y su valoracion es menor a 100" {
		assert.notThat(unComensalPaladarFino.leAgrada(otraProvoleta))
	}
	
	// No es necesario evaluar aqui tambien si puede o no pagar una comida dada, pues los tres tipos de comensales derivan de la misma clase. Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien si puede o no compar una comida dada, pues los tres tipos de comensales derivan de la misma clase. Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien la eleccion del platillo segun la valoracion maxima, pues los tres tipos de comensales derivan de la misma clase. Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien el descontar una cantidad de dinero, pues los tres tipos de comensales derivan de la misma clase. Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien recibir promocion, pues los tres tipos de comensales derivan de la misma clase. Con hacerlo una sola vez, alcanza.
}

describe "Comensal todo terreno" {
	test "Le agrada todo tipo de comida" {
		assert.that(unComensalTodoTerreno.leAgrada(unaProvoleta))
	}
	
	// No es necesario evaluar aqui tambien si puede o no pagar una comida dada, pues derivan los tres tipos de comensales de la misma clase. Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien si puede o no compar una comida dada, pues derivan los tres tipos de comensales de la misma clase. Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien la eleccion del platillo segun la valoracion maxima, pues derivan los tres tipos de comensales de la misma clase. Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien el descontar una cantidad de dinero, pues los tres tipos de comensales derivan de la misma clase. Con hacerlo una sola vez, alcanza.
	// No es necesario evaluar aqui tambien recibir promocion, pues los tres tipos de comensales derivan de la misma clase. Con hacerlo una sola vez, alcanza.
}