import Platillos.*
import Cocineros.*
import Especialidades.*

// ---------------------------------------------------------
// ðŸ”¸ Mi universo.
// ---------------------------------------------------------
// Platillos.
const unPlatoEntrada = new Entrada()
const unPlatoPrincipal = new Principal(cantAzucar = 25, esBonito = true)
const otroPlatoPrincipal = new Principal(cantAzucar = 25, esBonito = false)
const unPlatoPostre = new Postre(cantColores = 5)
const otroPlatoPostre = new Postre(cantColores = 1)
// Cocineros.
const unPastelero = new Cocinero(especialidad = new Pastelero(dulzorDeseado = 50))
const unChef = new Cocinero(especialidad = new Chef(caloriasMaxima = 500))
const otroChef = new Cocinero(especialidad = new Chef(caloriasMaxima = 50))

// ---------------------------------------------------------
// ðŸ”¸ Punto 1.
// ---------------------------------------------------------
describe "PUNTO 1" {
	test "Es posible saber el nivel de calorias de un plato entrada" {
		assert.equals(100, unPlatoEntrada.calorias())
	}
	
	test "Es posible saber el nivel de calorias de un plato principal" {
		assert.equals(175, unPlatoPrincipal.calorias())
	}
	
	test "Es posible saber el nivel de calorias de un plato postre" {
		assert.equals(460, unPlatoPostre.calorias())
	}
}

// ---------------------------------------------------------
// ðŸ”¸ Punto 2.
// ---------------------------------------------------------
describe "PUNTO 2" {
	test "Un pastelero puede catar un plato entrada" {
		assert.equals(0, unPastelero.catar(unPlatoEntrada))
	}
	
	test "Un pastelero puede catar un plato principal" {
		assert.equals(2.5, unPastelero.catar(unPlatoPrincipal))
	}
	
	test "Un pastelero puede catar un plato postre" {
		assert.equals(10, unPastelero.catar(unPlatoPostre))
	}
	
	test "Un chef puede catar un plato entrada y le da un 10 si es bonito y tiene hasta cierta cantidad de calorias" {
		assert.equals(10, unChef.catar(unPlatoEntrada))
	}
	
	test "Un chef puede catar un plato entrada y le da un 0 si tiene mas de cierta cantidad de calorias" {
		assert.equals(0, otroChef.catar(unPlatoEntrada))
	}
	
	test "Un chef puede catar un plato principal y le da 10 si es bonito y tiene hasta cierta cantidad de calorias" {
		assert.equals(10, unChef.catar(unPlatoPrincipal))
	}
	
	test "Un chef puede catar un plato principal y le da 0 si no es bonito" {
		assert.equals(0, unChef.catar(otroPlatoPrincipal))
	}
	
	test "Un chef puede catar un plato principal y le da 0 si tiene mas de cierta cantidad de calorias" {
		assert.equals(0, otroChef.catar(unPlatoPrincipal))
	}
	
	test "Un chef puede catar un plato postre y le da un 10 si es bonito y tiene hasta cierta cantidad de calorias" {
		assert.equals(10, unChef.catar(unPlatoPostre))
	}
	
	test "Un chef puede catar un plato postre y le da un 0 si no es bonito" {
		assert.equals(0, unChef.catar(otroPlatoPostre))
	}
	
	test "Un chef puede catar un plato postre y le da un 0 si tiene mas de cierta cantidad de calorias" {
		assert.equals(0, otroChef.catar(unPlatoPostre))
	}
}

// ---------------------------------------------------------
// ðŸ”¸ Punto 3.
// ---------------------------------------------------------
describe "PUNTO 3" {
	test "Un chef puede cambiar su especialidad a pastelero" {
		const pastelero = new Pastelero(dulzorDeseado = 150)
		unChef.especialidad(pastelero)
		assert.equals(pastelero, unChef.especialidad())
	}
	
	test "Un pastelero puede caambiar su especialidad a chef" {
		const chef = new Chef(caloriasMaxima = 150)
		unPastelero.especialidad(chef)
		assert.equals(chef, unPastelero.especialidad())
	}
}

// ---------------------------------------------------------
// ðŸ”¸ Punto 4.
// ---------------------------------------------------------
describe "PUNTO 4" {
	test "x" {
		assert.that(false)
	}
}

// ---------------------------------------------------------
// ðŸ”¸ Punto 5.
// ---------------------------------------------------------
describe "PUNTO 5" {
	test "x" {
		assert.that(false)
	}
}

// ---------------------------------------------------------
// ðŸ”¸ Punto 6.
// ---------------------------------------------------------
describe "PUNTO 6" {
	test "x" {
		assert.that(false)
	}
}